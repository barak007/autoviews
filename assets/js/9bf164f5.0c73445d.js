"use strict";(self.webpackChunk_autoviews_website=self.webpackChunk_autoviews_website||[]).push([[450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={},o="The JSON Schema",s={unversionedId:"entities/the-json-schema",id:"entities/the-json-schema",title:"The JSON Schema",description:"The AutoView component is using a standard JSONSchema",source:"@site/docs/entities/the-json-schema.md",sourceDirName:"entities",slug:"/entities/the-json-schema",permalink:"/autoviews/docs/entities/the-json-schema",draft:!1,editUrl:"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/the-json-schema.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"The Repository Provider",permalink:"/autoviews/docs/entities/repository-provider"},next:{title:"UISchema",permalink:"/autoviews/docs/entities/ui-schema"}},p={},l=[{value:"Usage of the JSONSchema",id:"usage-of-the-jsonschema",level:2},{value:"Example - An Object",id:"example---an-object",level:2},{value:"Example - Array of Objects",id:"example---array-of-objects",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-json-schema"},"The JSON Schema"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," component is using a standard ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},(0,r.kt)("inlineCode",{parentName:"a"},"JSONSchema"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," supports any structure of a ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONSchema")," with any level of nesting, assuming\n",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/components-repo"},"the component repository")," has components to render each type used in the schema."),(0,r.kt)("p",null,"The key attributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONSchema")," used with ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - the type of an object or field, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"array"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),", etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"title"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"description")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"description")," annotation keywords are descriptive only.\nThey do not add constraints to the data being validated. With ",(0,r.kt)("inlineCode",{parentName:"li"},"AutoView")," those can be used by components to render\na field title or a field description."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"required")," - describes which fields are required for an object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"properties")," - describes the properties of an object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"items")," - describes the type of array items, as a reference to another type or inline."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maximum"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"minimum"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"exclusiveMaximum"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"exclusiveMinimum")," - constraints for ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," types which components (in the repo) can optionally use,\nor can be used as part of component ",(0,r.kt)("a",{parentName:"li",href:"/docs/entities/components-repo#predicates"},"predicates")," in component repo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maxLength"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"minLength"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," - constraints for ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," types which components (in the repo) can optionally use,\nor can be used as part of component ",(0,r.kt)("a",{parentName:"li",href:"/docs/entities/components-repo#predicates"},"predicates")," in component repo.")),(0,r.kt)("p",null,"note: ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONSchema")," has other schema fields, which can be used by components registered in the components repo,\nor used as part of component ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/components-repo#predicates"},"predicates"),"."),(0,r.kt)("h2",{id:"usage-of-the-jsonschema"},"Usage of the JSONSchema"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONSchema")," should represent the structure of the data that ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," will render.\n",(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," is using the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONSchema")," to select which components to render, regardless if the actual\nvalues are present in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AutoView")," can validate the data with the schema (by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"validation")," prop)."),(0,r.kt)("h2",{id:"example---an-object"},"Example - An Object"),(0,r.kt)("p",null,"Schema of an object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import {CoreSchemaMetaSchema} from '@autoviews/core';\n\nconst userSchema: CoreSchemaMetaSchema = {\n  $id: 'userSchema',\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First Name'\n    },\n    lastName: {\n      type: 'string',\n      title: 'Last Name'\n    },\n    age: {\n      type: 'number',\n      title: 'Age'\n    },\n    active: {\n      type: 'boolean',\n      title: 'Is User Active'\n    }\n  },\n  required: ['firstName', 'lastName', 'age']\n};\n")),(0,r.kt)("h2",{id:"example---array-of-objects"},"Example - Array of Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"export const usersSchema: CoreSchemaMetaSchema = {\n  type: 'array',\n  title: 'Users',\n  items: userSchema\n};\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=9bf164f5.0c73445d.js.map