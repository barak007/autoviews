{"version":3,"file":"assets/js/32d91884.121aa950.js","mappings":"wZAAA,MCMaA,EAAmB,CAC5B,WCPJ,6oBDQI,YERJ,61GFSI,eDTJ,8mBCYaC,EAAiC,CAC1C,kBAAmB,SACnB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCC,WAAY,YGdHH,EAAmB,CAC5B,WCPJ,2nDDQI,YERJ,o0CFSI,eGTJ,0jBHYaC,EAAiC,CAC1C,kBAAmB,SACnB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCC,WAAY,YIVHC,EAAc,CAAC,EACfC,EAAe,QACfC,EAAW,CACtB,cAAiB,6BACjB,GAAM,6BACN,MAAS,QACT,YAAe,mBACf,OAAU,2CACV,cAAiB,aACjB,KAAQ,8BACR,UAAa,6CACb,OAAS,EACT,QAAW,oGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,eACT,UAAa,yCAEf,KAAQ,CACN,MAAS,OACT,UAAa,6CAGJC,EAAS,CAEtB,EAKaC,EAAM,CAAC,CAClBC,MAAO,mBACPC,GAAI,mBACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,IAMHC,GAJgBC,EAIqB,uBAJb,SAA6BC,GAErD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,EAClB,GAHkBD,MAKtB,MAAMI,EAAc,CAClBT,OAGa,SAASU,EAAW,GAG/B,IAH+B,WACjCC,KACGL,GACJ,EACC,OAAO,QALS,WAKC,UAAKG,EAAiBH,EAAK,CAAEK,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,SACH,UAGL,cACE,GAAM,oBACH,qBACL,iBAAK,qCAAmC,sBAAYC,WAAW,KAAM,QAAqB,uGAAqG,aAAGA,WAAW,IACzM,KAAQ,iEACL,YAAgB,sCACX,sBAAYA,WAAW,KAAM,SAAsB,OAAK,sBAAYA,WAAW,KAAM,SAAsB,4BACvH,sBACE,KAAQ,SACP,aAAGA,WAAW,cAAe,wCAAsC,sBAAYA,WAAW,KAAM,SAAsB,qBAAmB,sBAAYA,WAAW,KAAM,QAAqB,wBAAsB,sBAAYA,WAAW,KAAM,eAA4B,iBAAe,sBAAYA,WAAW,KAAM,SAAsB,iFAClU,sBAAYA,WAAW,KAAM,iCAA8C,6BAA2B,sBAAYA,WAAW,KAAM,SAAsB,kDACtK,QAAC,KAAI,UAAKC,EAAQ,CAAEF,QAAQ,WAC5B,cACE,GAAM,uBACH,wBACL,iBAAK,gEAA8D,sBAAYC,WAAW,KAAM,aAA0B,QAAM,sBAAYA,WAAW,KAAM,eAA4B,OACzL,iBAAK,+JACL,sBACE,KAAQ,SACP,aAAGA,WAAW,cAAe,eAAa,QAACT,EAAoB,CAACQ,QAAQ,yBAA2B,+IACtG,QAAC,KAAI,UAAKG,EAAiB,CAAEH,QAAQ,UAEzC,CAEAF,EAAWM,gBAAiB,C","sources":["webpack://@autoviews/website/./src/examples/subschemas/oneof/inside-object/schema.json","webpack://@autoviews/website/./src/examples/subschemas/oneof/inside-object/index.ts","webpack://@autoviews/website/./src/examples/subschemas/oneof/inside-object/app.tsx","webpack://@autoviews/website/./src/examples/subschemas/oneof/inside-object/repo.tsx","webpack://@autoviews/website/./src/examples/subschemas/oneof/enum/index.ts","webpack://@autoviews/website/./src/examples/subschemas/oneof/enum/app.tsx","webpack://@autoviews/website/./src/examples/subschemas/oneof/enum/repo.tsx","webpack://@autoviews/website/./src/examples/subschemas/oneof/enum/schema.json","webpack://@autoviews/website/./docs/subschemas/combiners-oneof.md"],"sourcesContent":["export default \"{\\n  \\\"title\\\": \\\"Some form\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"firstName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"title\\\": \\\"First name\\\"\\n    },\\n    \\\"lastName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"title\\\": \\\"Last name\\\"\\n    }\\n  },\\n  \\\"oneOf\\\": [\\n    {\\n      \\\"properties\\\": {\\n        \\\"homePhone\\\": {\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"title\\\": \\\"Home phone\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\\"homePhone\\\"]\\n    },\\n    {\\n      \\\"properties\\\": {\\n        \\\"mobilePhone\\\": {\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"title\\\": \\\"Mobile phone\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\\"mobilePhone\\\"]\\n    }\\n  ]\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\nexport const App = () => {\\n    const [value, setValue] = React.useState({});\\n    const onChange = React.useCallback(e => setValue(e.target.value), []);\\n\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={value}\\n                onChange={onChange}\\n            />\\n        </RepositoryProvider>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    AutoViewProps,\\n    ComponentsRepo,\\n    AutoFields,\\n    RepositoryComponentByType,\\n    changeEventHandler\\n} from '@autoviews/core';\\nimport {\\n    TextField,\\n    FormControl,\\n    FormLabel,\\n    RadioGroup,\\n    FormControlLabel,\\n    Radio\\n} from '@mui/material';\\n\\nconst StringComponent: React.FC<AutoViewProps> = props => (\\n    <FormControl\\n        fullWidth\\n        margin=\\\"normal\\\"\\n    >\\n        <TextField\\n            variant=\\\"outlined\\\"\\n            label={props.schema.title}\\n            value={props.data}\\n            onChange={changeEventHandler(props, e => e.target.value)}\\n        />\\n    </FormControl>\\n);\\n\\nconst ObjectComponent: React.FC<AutoViewProps> = props => (\\n    <>\\n        {props.schema.oneOf && (\\n            <RepositoryComponentByType\\n                type={customOneOfType}\\n                {...props}\\n            />\\n        )}\\n        <AutoFields {...props} />\\n    </>\\n);\\n\\nconst OneOfAsEnumComponent: React.FC<AutoViewProps> = props => (\\n    <FormControl\\n        fullWidth\\n        margin=\\\"normal\\\"\\n    >\\n        <FormLabel id={props.schema.title}>{props.schema.title}</FormLabel>\\n        <RadioGroup\\n            row\\n            name={props.schema.title}\\n            onChange={changeEventHandler(props, e => e.target.value)}\\n            defaultValue={props.schema.oneOf[0].const}\\n        >\\n            {props.schema.oneOf!.map(item => (\\n                <FormControlLabel\\n                    key={item.const}\\n                    value={item.const}\\n                    control={<Radio />}\\n                    label={item.title}\\n                />\\n            ))}\\n        </RadioGroup>\\n    </FormControl>\\n);\\n\\nconst customOneOfType = Symbol('customOneOf');\\nconst CustomOneOfComponent: React.FC<AutoViewProps> = props => {\\n    const [option, setOption] = React.useState(0);\\n\\n    const onChange = React.useCallback<\\n        React.ChangeEventHandler<HTMLSelectElement>\\n    >(\\n        e => {\\n            setOption(parseInt(e.target.value, 10));\\n        },\\n        [setOption]\\n    );\\n\\n    const optionSchema = {\\n        title: 'Select contact',\\n        oneOf: props.schema.oneOf?.map((_, index) => ({\\n            const: index,\\n            title: `Option #${index + 1}`\\n        }))\\n    };\\n\\n    return (\\n        <>\\n            <AutoView\\n                {...props}\\n                schema={optionSchema}\\n                onChange={onChange}\\n                data={option}\\n            />\\n            <AutoFields\\n                {...props}\\n                schema={{...props.schema, ...props.schema.oneOf![option]}}\\n            />\\n        </>\\n    );\\n};\\n\\nexport const repo = new ComponentsRepo('oneof-inside-object-repo', node => {\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    if ('oneOf' in node) {\\n        return 'oneOf';\\n    }\\n})\\n    .register('string', {\\n        name: 'string',\\n        component: StringComponent\\n    })\\n    .register('number', {\\n        name: 'number',\\n        component: StringComponent\\n    })\\n    .register('object', {\\n        name: 'object',\\n        component: ObjectComponent\\n    })\\n    .register('oneOf', {\\n        name: 'oneOfAsEnum',\\n        component: OneOfAsEnumComponent\\n    })\\n    .register(customOneOfType, {\\n        name: 'oneOf',\\n        component: CustomOneOfComponent\\n    });\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\nimport {Box, Typography} from '@mui/material';\\n\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\nconst App = () => {\\n    const [value, setValue] = React.useState<string>('');\\n    const onChange = React.useCallback(e => setValue(e.target.value), []);\\n\\n    return (\\n        <>\\n            <RepositoryProvider components={repo}>\\n                <AutoView\\n                    schema={schema as CoreSchemaMetaSchema}\\n                    data={value}\\n                    onChange={onChange}\\n                />\\n            </RepositoryProvider>\\n            {value && (\\n                <>\\n                    <Typography>\\n                        <Box\\n                            sx={{marginTop: '20px'}}\\n                            style={{display: 'flex', alignItems: 'center'}}\\n                        >\\n                            <span>You just selected</span>\\n                            <span\\n                                style={{\\n                                    background: value,\\n                                    display: 'block',\\n                                    width: '16px',\\n                                    height: '16px',\\n                                    margin: '0 10px',\\n                                    borderRadius: '4px'\\n                                }}\\n                            />\\n                        </Box>\\n                    </Typography>\\n                </>\\n            )}\\n        </>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, changeEventHandler, AutoFields} from '@autoviews/core';\\nimport {FormControl, InputLabel, Select, MenuItem} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('enum-repo', node => {\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    if ('oneOf' in node) {\\n        return 'oneOf';\\n    }\\n\\n    throw new Error('cannot resolve type');\\n});\\n\\nrepo.register('object', {\\n    name: 'object',\\n    component: AutoFields\\n});\\n\\nrepo.register('oneOf', {\\n    name: 'oneOfAsEnum',\\n    component: props => (\\n        <FormControl fullWidth>\\n            <InputLabel id={props.schema.title}>\\n                {props.schema.title}\\n            </InputLabel>\\n            <Select\\n                labelId={props.schema.title}\\n                id=\\\"select\\\"\\n                value={props.data}\\n                label={props.schema.title}\\n                onChange={changeEventHandler(props, e => e.target.value)}\\n            >\\n                {props.schema.oneOf!.map(item => (\\n                    <MenuItem\\n                        key={item.const}\\n                        value={item.const}\\n                    >\\n                        {item.title}\\n                    </MenuItem>\\n                ))}\\n            </Select>\\n        </FormControl>\\n    )\\n});\\n\";","export default \"{\\n  \\\"title\\\": \\\"Form\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"color\\\": {\\n      \\\"title\\\": \\\"Favorite color\\\",\\n      \\\"oneOf\\\": [\\n        {\\n          \\\"const\\\": \\\"#c0c0c0\\\",\\n          \\\"title\\\": \\\"Silver\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#ff00ff\\\",\\n          \\\"title\\\": \\\"Fuchsia\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#00ff00\\\",\\n          \\\"title\\\": \\\"Lime\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#800000\\\",\\n          \\\"title\\\": \\\"Maroon\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#008080\\\",\\n          \\\"title\\\": \\\"Teal\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'oneOf';\nexport const metadata = {\n  \"unversionedId\": \"subschemas/combiners-oneof\",\n  \"id\": \"subschemas/combiners-oneof\",\n  \"title\": \"oneOf\",\n  \"description\": \"Enum with titles\",\n  \"source\": \"@site/docs/subschemas/combiners-oneof.md\",\n  \"sourceDirName\": \"subschemas\",\n  \"slug\": \"/subschemas/combiners-oneof\",\n  \"permalink\": \"/autoviews/docs/subschemas/combiners-oneof\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/subschemas/combiners-oneof.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"if/then/else\",\n    \"permalink\": \"/autoviews/docs/subschemas/conditions\"\n  },\n  \"next\": {\n    \"title\": \"$ref\",\n    \"permalink\": \"/autoviews/docs/subschemas/combiners-ref\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as insideObjectFiles from '../../src/examples/subschemas/oneof/inside-object';\nimport * as enumDemo from '@site/src/examples/subschemas/oneof/enum';\nexport const toc = [{\n  value: 'Enum with titles',\n  id: 'enum-with-titles',\n  level: 2\n}, {\n  value: 'OneOf inside object',\n  id: 'oneof-inside-object',\n  level: 2\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst CustomOneOfComponent = makeShortcode(\"CustomOneOfComponent\");\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"oneof\"\n    }}>{`oneOf`}</h1>\n\n\n    <h2 {...{\n      \"id\": \"enum-with-titles\"\n    }}>{`Enum with titles`}</h2>\n    <p>{`Where dropdown render is needed, `}<inlineCode parentName=\"p\">{`enum`}</inlineCode>{` is the first thing that come to mind. Unfortunately, it's lack of titles functionality (enumNames `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rjsf-team/react-jsonschema-form/issues/532\"\n      }}>{`proposal`}</a>{` wasn't accepted).\nIn this case, `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`const`}</inlineCode>{` is here to the rescue.`}</p>\n    <admonition {...{\n      \"type\": \"note\"\n    }}><p parentName=\"admonition\">{`In this example, schema's node with `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` doesn't contain `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` keyword, so repo's `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` must return `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` type in order to render registered component automatically.\nAlternatively, `}<inlineCode parentName=\"p\">{`<RepositoryComponentByType />`}</inlineCode>{` could be used to render `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` component manually inside object component.`}</p></admonition>\n    <Demo {...enumDemo} mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"oneof-inside-object\"\n    }}>{`OneOf inside object`}</h2>\n    <p>{`Common example with form, where only one field is required (`}<inlineCode parentName=\"p\">{`homePhone`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`mobilePhone`}</inlineCode>{`).`}</p>\n    <p>{`This examples have two different oneOf components, one the same as in previous example, and second one, which is rendered manually as part of object type.`}</p>\n    <admonition {...{\n      \"type\": \"note\"\n    }}><p parentName=\"admonition\">{`Note, here `}<CustomOneOfComponent mdxType=\"CustomOneOfComponent\" />{` contains some JSON Schema generation, which could passed to AutoView to automatically render dropdown with registered in repo component.`}</p></admonition>\n    <Demo {...insideObjectFiles} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["files","dependencies","options","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","CustomOneOfComponent","name","props","console","warn","layoutProps","MDXContent","components","mdxType","parentName","enumDemo","insideObjectFiles","isMDXComponent"],"sourceRoot":""}