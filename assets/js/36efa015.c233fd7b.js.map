{"version":3,"file":"assets/js/36efa015.c233fd7b.js","mappings":"kQAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,wBACfC,EAAW,CACtB,cAAiB,iCACjB,GAAM,iCACN,MAAS,wBACT,YAAe,0GACf,OAAU,+CACV,cAAiB,WACjB,KAAQ,kCACR,UAAa,iDACb,OAAS,EACT,QAAW,wGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,SACT,UAAa,mCAEf,KAAQ,CACN,MAAS,aACT,UAAa,gCAGJC,EAAS,CAEtB,EAGaC,EAAM,CAAC,CAClBC,MAAO,mDACPC,GAAI,6BACJC,MAAO,GACN,CACDF,MAAO,MACPC,GAAI,MACJC,MAAO,GACN,CACDF,MAAO,UACPC,GAAI,UACJC,MAAO,GACN,CACDF,MAAO,yDACPC,GAAI,mCACJC,MAAO,GACN,CACDF,MAAO,MACPC,GAAI,QACJC,MAAO,GACN,CACDF,MAAO,UACPC,GAAI,YACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAW,GAG/B,IAH+B,WACjCC,KACGC,GACJ,EACC,OAAO,QALS,WAKC,UAAKH,EAAiBG,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAE5E,cACE,GAAM,yBACH,0BACL,iBAAK,yNAEL,sBACE,KAAQ,YACP,aAAGC,WAAW,cAAe,+EAA6E,sBAAYA,WAAW,KAAM,0BAAuC,aACjL,cACE,GAAM,+BACL,sBAAYA,WAAW,MAAO,mCACjC,iBAAK,iDACL,iBAAK,2FACL,cACE,GAAM,OACH,QACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,iLAOP,cACE,GAAM,WACH,YACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,0JAQP,sBACE,KAAQ,QACP,aAAGA,WAAW,cAAe,mFAChC,cACE,GAAM,qCACL,sBAAYA,WAAW,MAAO,yCACjC,iBAAK,wDACL,cACE,GAAM,SACH,QACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,gMAOP,cACE,GAAM,aACH,YACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,0KASX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://@autoviews/website/./docs/entities/repository-components.md"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Repository Components';\nexport const metadata = {\n  \"unversionedId\": \"entities/repository-components\",\n  \"id\": \"entities/repository-components\",\n  \"title\": \"Repository Components\",\n  \"description\": \"AutoViews provides two React components for independent render of any component registered within repo.\",\n  \"source\": \"@site/docs/entities/repository-components.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/repository-components\",\n  \"permalink\": \"/autoviews/docs/entities/repository-components\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/repository-components.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"Events\",\n    \"permalink\": \"/autoviews/docs/entities/events\"\n  },\n  \"next\": {\n    \"title\": \"Subschemas\",\n    \"permalink\": \"/autoviews/docs/subschemas/\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: '<code>&lt;RepositoryComponentByType /&gt;</code>',\n  id: 'repositorycomponentbytype-',\n  level: 2\n}, {\n  value: 'API',\n  id: 'api',\n  level: 3\n}, {\n  value: 'Example',\n  id: 'example',\n  level: 3\n}, {\n  value: '<code>&lt;RepositoryComponentByRecordName /&gt;</code>',\n  id: 'repositorycomponentbyrecordname-',\n  level: 2\n}, {\n  value: 'API',\n  id: 'api-1',\n  level: 3\n}, {\n  value: 'Example',\n  id: 'example-1',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"repository-components\"\n    }}>{`Repository Components`}</h1>\n    <p>{`AutoViews provides two React components for independent render of any component registered within repo.\nThese components are useful in case of rendering some specific logic which couldn't be described in schema.`}</p>\n    <admonition {...{\n      \"type\": \"caution\"\n    }}><p parentName=\"admonition\">{`Both components use Repository context. Make sure they are rendered inside `}<inlineCode parentName=\"p\">{`<RepositoryProvider />`}</inlineCode>{` scope.`}</p></admonition>\n    <h2 {...{\n      \"id\": \"repositorycomponentbytype-\"\n    }}><inlineCode parentName=\"h2\">{`<RepositoryComponentByType />`}</inlineCode></h2>\n    <p>{`Renders component, registered by given type.`}</p>\n    <p>{`When multiple components registered with the same type, the last registered is chosen.`}</p>\n    <h3 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface RepositoryComponentByTypeProps {\n  type: string | symbol;\n}\ntype RepositoryComponentByType = React.FC<\n  RepositoryComponentByTypeProps & AutoViewProps\n>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {RepositoryComponentByType} from '@autoviews/core';\n\n<RepositoryComponentByType\n  type=\"string\"\n  schema={schema}\n  data={data}\n/>;\n`}</code></pre>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Using symbols can help avoid collisions with real types, described in schema.`}</p></admonition>\n    <h2 {...{\n      \"id\": \"repositorycomponentbyrecordname-\"\n    }}><inlineCode parentName=\"h2\">{`<RepositoryComponentByRecordName />`}</inlineCode></h2>\n    <p>{`Renders component, registered by given record name.`}</p>\n    <h3 {...{\n      \"id\": \"api-1\"\n    }}>{`API`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface RepositoryComponentByRecordNameProps {\n  recordName: string;\n}\ntype RepositoryComponentByRecordName = React.FC<\n  RepositoryComponentByRecordNameProps & AutoViewProps\n>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {RepositoryComponentByType} from '@autoviews/core';\n\n<RepositoryComponentByRecordName\n  recordName=\"myComponent\"\n  schema={schema}\n  data={data}\n/>;\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}