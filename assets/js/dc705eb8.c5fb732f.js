"use strict";(self.webpackChunk_autoviews_website=self.webpackChunk_autoviews_website||[]).push([[390],{5421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>v,frontMatter:()=>l,metadata:()=>d,toc:()=>y});var o={};t.r(o),t.d(o,{dependencies:()=>i,files:()=>p,options:()=>m});var a=t(7462),r=(t(7294),t(3905)),s=t(8155);const p={"/App.tsx":"import React from 'react';\nimport {\n    RepositoryProvider,\n    AutoView,\n    CoreSchemaMetaSchema\n} from '@autoviews/core';\n\nimport {data} from './data';\nimport schema from './schema.json';\nimport {repo} from './repo';\n\nexport default function App() {\n    return (\n        <RepositoryProvider components={repo}>\n            <AutoView\n                schema={schema as CoreSchemaMetaSchema}\n                data={data}\n            />\n        </RepositoryProvider>\n    );\n}\n","/repo.tsx":"import React from 'react';\nimport {ComponentsRepo, AutoFields} from '@autoviews/core';\n\nexport const repo = new ComponentsRepo('MyListRepo')\n    .register('object', {\n        name: 'MyObject',\n        component: props => {\n            return (\n                <>\n                    <style>\n                        {`\n    .root {\n        display: grid;\n        grid-template-rows: 50px 1fr 30px;\n        grid-template-columns: 150px 1fr;\n    }\n    .child {}\n`}\n                    </style>\n                    <div\n                        style={{padding: '10px'}}\n                        className=\"root\"\n                    >\n                        <AutoFields {...props} />\n                    </div>\n                </>\n            );\n        }\n    })\n    .register('string', {\n        name: 'MyStringComponent',\n        component: props => <div className=\"child\">{props.data}</div>\n    })\n    .register('number', {\n        name: 'MyNumberComponent',\n        component: props => <div className=\"child\">{props.data}</div>\n    })\n    .register('boolean', {\n        name: 'MyBooleanComponent',\n        component: props => (\n            <div className=\"child\">{props.data ? 'online' : 'offline'}</div>\n        )\n    });\n","/schema.json":'{\n  "type": "object",\n  "properties": {\n    "login": {\n      "type": "string"\n    },\n    "age": {\n      "type": "number"\n    },\n    "active": {\n      "type": "boolean"\n    }\n  }\n}\n',"/data.js":"export const data = {\n    login: 'johondoe',\n    age: 21,\n    active: true\n};\n"},i={"@mui/material":"^5.3.1","@emotion/react":"^11.7.1","@emotion/styled":"^11.6.0",lodash:"^4.17.21"},m={activePath:"/App.tsx"},l={},c="Layout (placeholder)",d={unversionedId:"examples/layout",id:"examples/layout",title:"Layout (placeholder)",description:"",source:"@site/docs/examples/layout.md",sourceDirName:"examples",slug:"/examples/layout",permalink:"/autoviews/docs/examples/layout",draft:!1,editUrl:"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/layout.md",tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"AutoHeaders usage",permalink:"/autoviews/docs/examples/table-with-header"}},u={},y=[],h={toc:y};function v(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"layout-placeholder"},"Layout (placeholder)"),(0,r.kt)(s.B,(0,a.Z)({},o,{mdxType:"Demo"})))}v.isMDXComponent=!0}}]);
//# sourceMappingURL=dc705eb8.c5fb732f.js.map