{"version":3,"file":"assets/js/b58b6602.11af064f.js","mappings":"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","sources":["webpack://@autoviews/docs/../../node_modules/@mdx-js/react/dist/esm.js","webpack://@autoviews/docs/./docs/entities/components-repo.md"],"sourcesContent":["import React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n\nvar MDXContext = /*#__PURE__*/React.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = 'mdxType';\nvar DEFAULTS = {\n  inlineCode: 'code',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React.createElement(React.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, [\"components\", \"mdxType\", \"originalType\", \"parentName\"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components[\"\".concat(parentName, \".\").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/React.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = 'MDXCreateElement';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === 'string' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === 'string' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return React.createElement.apply(null, createElementArgArray);\n  }\n\n  return React.createElement.apply(null, args);\n}\n\nexport { MDXContext, MDXProvider, createElement as mdx, useMDXComponents, withMDXComponents };\n","\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'The Components Repository';\nexport const metadata = {\n  \"unversionedId\": \"entities/components-repo\",\n  \"id\": \"entities/components-repo\",\n  \"title\": \"The Components Repository\",\n  \"description\": \"The component repository is a map of data type to AutoView React components used to render a field of that data type.\",\n  \"source\": \"@site/docs/entities/components-repo.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/components-repo\",\n  \"permalink\": \"/autoviews/docs/entities/components-repo\",\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/packages/website/docs/entities/components-repo.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"The AutoView Component\",\n    \"permalink\": \"/autoviews/docs/basic/autoview\"\n  },\n  \"next\": {\n    \"title\": \"Creating Array components\",\n    \"permalink\": \"/autoviews/docs/entities/array-components\"\n  }\n};\nexport const assets = {\n\n};\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [{\n  value: 'Usage of the Component Repository',\n  id: 'usage-of-the-component-repository',\n  level: 2\n}, {\n  value: 'The ComponentsRepo Class',\n  id: 'the-componentsrepo-class',\n  level: 2\n}, {\n  value: 'Example - A simple repository example',\n  id: 'example---a-simple-repository-example',\n  level: 3\n}, {\n  value: 'The register function',\n  id: 'the-register-function',\n  level: 2\n}, {\n  value: 'The getNodeType constructor parameter',\n  id: 'the-getnodetype-constructor-parameter',\n  level: 2\n}, {\n  value: 'Example - using <code>getNodeType</code> with JSONSchema enum',\n  id: 'example---using-getnodetype-with-jsonschema-enum',\n  level: 3\n}, {\n  value: 'Example — Using custom JSONSchema types',\n  id: 'example--using-custom-jsonschema-types',\n  level: 3\n}, {\n  value: 'Registering multiple components per JSONSchema data type',\n  id: 'registering-multiple-components-per-jsonschema-data-type',\n  level: 2\n}, {\n  value: 'Predicates',\n  id: 'predicates',\n  level: 2\n}, {\n  value: 'Example — selecting Slider component for numbers with min &amp; max constraints',\n  id: 'example--selecting-slider-component-for-numbers-with-min--max-constraints',\n  level: 3\n}, {\n  value: 'Using Multiple Repositories',\n  id: 'using-multiple-repositories',\n  level: 2\n}, {\n  value: 'Clone',\n  id: 'clone',\n  level: 2\n}, {\n  value: 'Example - cloning a repo',\n  id: 'example---cloning-a-repo',\n  level: 3\n}, {\n  value: 'addWrapper',\n  id: 'addwrapper',\n  level: 2\n}, {\n  value: 'Example - wrapping all components with adding a title',\n  id: 'example---wrapping-all-components-with-adding-a-title',\n  level: 3\n}, {\n  value: 'Example - wrapping all components with a table cell',\n  id: 'example---wrapping-all-components-with-a-table-cell',\n  level: 3\n}, {\n  value: 'Example — wrapping only &#39;number-input&#39; component',\n  id: 'example--wrapping-only-number-input-component',\n  level: 3\n}, {\n  value: 'Example — wrapping all components except &#39;number-input&#39;',\n  id: 'example--wrapping-all-components-except-number-input',\n  level: 3\n}, {\n  value: 'remove',\n  id: 'remove',\n  level: 2\n}, {\n  value: 'Example - remove a component from the repo',\n  id: 'example---remove-a-component-from-the-repo',\n  level: 3\n}, {\n  value: 'replace',\n  id: 'replace',\n  level: 2\n}, {\n  value: 'Example - replacing a single component',\n  id: 'example---replacing-a-single-component',\n  level: 3\n}, {\n  value: 'replaceAll',\n  id: 'replaceall',\n  level: 2\n}, {\n  value: 'Example - replacing multiple components',\n  id: 'example---replacing-multiple-components',\n  level: 3\n}, {\n  value: 'composeRepos',\n  id: 'composerepos',\n  level: 2\n}, {\n  value: 'Example - creating a new component repo from 2 repos',\n  id: 'example---creating-a-new-component-repo-from-2-repos',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"the-components-repository\"\n    }}>{`The Components Repository`}</h1>\n    <p>{`The component repository is a map of data type to AutoView React components used to render a field of that data type.`}</p>\n    <p>{`In essence, the component repository is a map of`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`Map<type => React.ComponentType<AutoViewProps>>\n`}</code></pre>\n    <p>{`An AutoView React Component has the signature`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`React.ComponentType<AutoViewProps>\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`AutoViewProps`}</inlineCode>{` has a lot of properties, but the most important is the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` prop which is the field data the component has to render.`}</p>\n    <h2 {...{\n      \"id\": \"usage-of-the-component-repository\"\n    }}>{`Usage of the Component Repository`}</h2>\n    <p>{`The main use of the component repository to provide `}<inlineCode parentName=\"p\">{`AutoView`}</inlineCode>{` a set of component to render for different\ndata types.`}</p>\n    <p>{`One common pattern is to replace views by replacing the Component Repository with another, for instance\nshifting from a single column layout to a dual column layout, or from a Card layout to a Table layout.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{` class provides function to create, clone, modify or apply aspects (wrap) on the Components Repository.`}</p>\n    <h2 {...{\n      \"id\": \"the-componentsrepo-class\"\n    }}>{`The ComponentsRepo Class`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{` is the main implementation of the Component Repository.\nIt takes two parameters`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: Repository name`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getNodeType`}</inlineCode>{`: the callback that resolves the `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` from the `}<inlineCode parentName=\"li\">{`JSONSchema`}</inlineCode>{` leaf (more on the callback below)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example---a-simple-repository-example\"\n    }}>{`Example - A simple repository example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import {ComponentsRepo} from '@autoviews/core';\n\nexport const myRepo = new ComponentsRepo('displayRepo')\n  .register('string', {\n    name: 'textComponent',\n    component: props => <span>{props.data}</span>\n  })\n  .register('number', {\n    name: 'numberComponent',\n    component: props => <span>{props.data}</span>\n  })\n  .register('boolean', {\n    name: 'booleanComponent',\n    component: props => <span>{props.data ? '+' : '-'}</span>\n  });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-register-function\"\n    }}>{`The register function`}</h2>\n    <p>{`The repository register function adds a new component to the repository per data type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`register(type: string | symbol,\n  record: ComponentRepoRecord<AutoViewProps>)\n\nexport interface ComponentRepoRecord<P> {\n    name: string;\n    component: React.ComponentType<P>;\n    predicate?: Predicate;\n    defaultOptions?: any;\n}\n`}</code></pre>\n    <p>{`Where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{`: the name of the `}<inlineCode parentName=\"li\">{`JSONSchema`}</inlineCode>{`'s type, such as `}<inlineCode parentName=\"li\">{`\"string\"`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`\"object\"`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`\"number\"`}</inlineCode>{`, or a `}<inlineCode parentName=\"li\">{`Symbol`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`record`}</inlineCode>{`: the repository record, which provides information on the registered component`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: the name of component within the repository, for later reference`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`component`}</inlineCode>{`: the actual component`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`predicate`}</inlineCode>{`: a predicate computed on the schema field, if to use the component for that schema member`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultOptions`}</inlineCode>{`: option to pass to the component as props. `}<strong parentName=\"li\">{`TBD`}</strong></li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"the-getnodetype-constructor-parameter\"\n    }}>{`The getNodeType constructor parameter`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` callback allows defining how to calculate data type for the JSONSchema nodes. The return value of the callback is used to match with registered component record types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`getNodeType: (node: CoreSchemaMetaSchema) => (string = node => node.type);\n`}</code></pre>\n    <p>{`The default `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` implementation returns the type field of the JSONSchema node. `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` can return any string value, which can be used to extract any mapping of JSON Schema nodes to type name.`}</p>\n    <h3 {...{\n      \"id\": \"example---using-getnodetype-with-jsonschema-enum\"\n    }}>{`Example - using `}<inlineCode parentName=\"h3\">{`getNodeType`}</inlineCode>{` with JSONSchema enum`}</h3>\n    <p>{`One example of when `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` is useful is with JSONSchema enums. JSONSchema does not define an Enum type, rather it considers enum as a constraint on other types.`}</p>\n    <p>{`The JSONSchema enum is defined as`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`{\n  \"enum\": [\"red\", \"amber\", \"green\"]\n}\n`}</code></pre>\n    <p>{`The following defining the `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` maps the enum JSON node into enum type name`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const myRepo = new ComponentsRepo('myRepo', node =>\n  'enum' in node ? 'enum' : node.type\n);\nmyRepo.register('enum', {\n  name: 'select',\n  component: SelectComponent\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example--using-custom-jsonschema-types\"\n    }}>{`Example — Using custom JSONSchema types`}</h3>\n    <p>{`Let’s assume we have a custom type name on the JSONSchema called `}<inlineCode parentName=\"p\">{`myCustomType`}</inlineCode>{`. We can support it like the below example`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const myRepo = new ComponentsRepo('myRepo', node => node.myCustomType);\nmyRepo.register('user', {\n  name: 'user-card',\n  component: UserCardComponent\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"registering-multiple-components-per-jsonschema-data-type\"\n    }}>{`Registering multiple components per JSONSchema data type`}</h2>\n    <p>{`Multiple components can be registered for the same data type. When registering multiple components, by default, the last registered component will be selected.`}</p>\n    <p>{`Registering multiple components allows selecting components using predicates or `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/ui-schema\"\n      }}>{`UISchema`}</a>{`.\nPredicates are used when the condition is computed on the JSONSchema, such as `}<inlineCode parentName=\"p\">{`maxLength`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`maximum`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{`. A concrete example is selecting the Slider component when a number has `}<inlineCode parentName=\"p\">{`maximum`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`minimum`}</inlineCode>{` constraints.\n`}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` is used when we want to select a specific component or pass properties to the component on a specific JSONSchema path (`}<inlineCode parentName=\"p\">{`JSONPointer`}</inlineCode>{`).`}</p>\n    <h2 {...{\n      \"id\": \"predicates\"\n    }}>{`Predicates`}</h2>\n    <p>{`Predicates are functions defined when registering a component, defining when to use the component based on the JSONSchema.`}</p>\n    <p>{`The Predicate signature is`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type Predicate = (node: CoreSchemaMetaSchema) => boolean;\n`}</code></pre>\n    <p>{`Where`}</p>\n    <ul>\n      <li parentName=\"ul\">{`node: is the JSONSchema node the component is considered for`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example--selecting-slider-component-for-numbers-with-min--max-constraints\"\n    }}>{`Example — selecting Slider component for numbers with min & max constraints`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`myRepo.register(\n    'number',\n    {\n        name: 'slider',\n        component: Slider,\n        predicate: node =>\n            node.hasOwnProperty('minimum') && node.hasOwnProperty('maximum');\n    }\n);\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` in the example above is the current JSONSchema node for the Slider component. In this example the predicate applies the Slider component only for number type JSONSchema nodes that have defined the minimum and maximum constraints.`}</p>\n    <h2 {...{\n      \"id\": \"using-multiple-repositories\"\n    }}>{`Using Multiple Repositories`}</h2>\n    <p>{`In many applications we want to have multiple component repositories.`}</p>\n    <p>{`The best example is when we want to render different layouts (such as card, table, grid or different form layouts) at which each we want to have different sets of components. In such a case it makes sense to use multiple component repositories, which gives us a few features:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Change layout by changing repository.`}</li>\n      <li parentName=\"ul\">{`Partial loading — loading one repository at a time.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"clone\"\n    }}>{`Clone`}</h2>\n    <p>{`The clone function allows to deep copy a repo including all the components. Repository cloning is useful when in need of multiple repositories, for creating a base repository which is cloned and extended, by adding more components, replacing components or adding wrappers.`}</p>\n    <p>{`Once cloning a repository, any additional action on the cloned repository do not affect the base repository, including adding wrappers (`}<inlineCode parentName=\"p\">{`addWrapper`}</inlineCode>{`), removing components (`}<inlineCode parentName=\"p\">{`remove`}</inlineCode>{`) or replacing components (`}<inlineCode parentName=\"p\">{`replace`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`replaceAll`}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`clone(name: string, getNodeType?: GetNode)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---cloning-a-repo\"\n    }}>{`Example - cloning a repo`}</h3>\n    <p>{`Cloning the `}<inlineCode parentName=\"p\">{`myRepo`}</inlineCode>{` defined above`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const myRepoClone = myRepo.clone('myRepoClone');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"addwrapper\"\n    }}>{`addWrapper`}</h2>\n    <p><inlineCode parentName=\"p\">{`addWrapper`}</inlineCode>{` allows wrapping all or some of the components of a repository with another React component.`}</p>\n    <p><inlineCode parentName=\"p\">{`addWrapper`}</inlineCode>{` is very useful when combined with `}<inlineCode parentName=\"p\">{`clone`}</inlineCode>{` as it allows extending a base repository`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`addWrapper(fn: WrapperFunction, rules?: IncludeExcludeRules)\n\nexport type WrapperFunction = (\n    item: JSX.Element,\n    props: AutoViewProps\n) => JSX.Element;\n\nexport interface IncludeExcludeRules {\n    include?: string[];\n    exclude?: string[];\n}\n`}</code></pre>\n    <p>{`Where`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fn`}</inlineCode>{`: the wrapper function, which accepts`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`item`}</inlineCode>{`: the original React component`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`props`}</inlineCode>{`: the `}<inlineCode parentName=\"li\">{`AutoViewProps`}</inlineCode>{` at the schema location`}</li>\n          <li parentName=\"ul\">{`Returns: the wrapped component`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rules`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`include`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`exclude`}</inlineCode>{` rules for what types to wrap, by the component name as defined when registering the component`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example---wrapping-all-components-with-adding-a-title\"\n    }}>{`Example - wrapping all components with adding a title`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`myRepoClone.addWrapper(\n  (item: JSX.Element, props: AutoViewProps): JSX.Element => (\n    <>\n      <h3>{props.schema.title}</h3>\n      {item}\n    </>\n  )\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---wrapping-all-components-with-a-table-cell\"\n    }}>{`Example - wrapping all components with a table cell`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`myRepoClone.addWrapper(\n  (item: JSX.Element, props: AutoViewProps): JSX.Element => <td>{item}<td/>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example--wrapping-only-number-input-component\"\n    }}>{`Example — wrapping only 'number-input' component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`myRepo.addWrapper(\n  (item, props) => (\n    <>\n      <h3>{props.schema.title}</h3>\n      {item}\n    </>\n  ),\n  {\n    include: ['number-input']\n  }\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example--wrapping-all-components-except-number-input\"\n    }}>{`Example — wrapping all components except 'number-input'`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`myRepo.addWrapper(\n  (item, props) => (\n    <>\n      <h3>{props.schema.title}</h3>\n      {item}\n    </>\n  ),\n  {\n    exclude: ['number-input']\n  }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"remove\"\n    }}>{`remove`}</h2>\n    <p>{`Removes previously registered component from the component repository by component name.`}</p>\n    <h3 {...{\n      \"id\": \"example---remove-a-component-from-the-repo\"\n    }}>{`Example - remove a component from the repo`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`myRepo.register('string', {\n  name: 'string-component',\n  component: SomeComponent\n});\n//...\nmyRepo.remove('string-component');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"replace\"\n    }}>{`replace`}</h2>\n    <p>{`Replace a previously registered component by component name.`}</p>\n    <p><inlineCode parentName=\"p\">{`replace`}</inlineCode>{` ensures that the new component will have the same index (order) as the old one. It is important because by default `}<inlineCode parentName=\"p\">{`<AutoView />`}</inlineCode>{` picks the last registered component in `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example---replacing-a-single-component\"\n    }}>{`Example - replacing a single component`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`myRepo.register('number', {\n  name: 'number-input',\n  component: OldComponent\n});\n\nrepo.replace('MyNumberComponent', oldRecord => ({\n  ...oldRecord,\n  component: NewComponent\n}));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"replaceall\"\n    }}>{`replaceAll`}</h2>\n    <p>{`Replace all enables replacing multiple existing components with a given component. It is useful for replacing original components with higher order components.`}</p>\n    <p>{`Similar to `}<inlineCode parentName=\"p\">{`addWrapper`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`replaceAll`}</inlineCode>{` method allows defining `}<inlineCode parentName=\"p\">{`include`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`exclude`}</inlineCode>{` options (array of component names).`}</p>\n    <h3 {...{\n      \"id\": \"example---replacing-multiple-components\"\n    }}>{`Example - replacing multiple components`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`repo.replaceAll(\n  record => {\n    const OriginalComponent = record.component;\n    return {\n      ...record,\n      component: props => <OriginalComponent {...doSomethingWithProps(props)} />\n    };\n  },\n  {\n    include: ['number-input', 'text-input']\n  }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"composerepos\"\n    }}>{`composeRepos`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`composeRepos`}</inlineCode>{` utility creates a new repository by composing multiple repositories into one.\nThe utility is not a member of the `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{`, rather it is imported independently.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`declare function composeRepos(\n  config: {\n    name: string;\n    getNodeType?: GetNode;\n  },\n  ...repos: [ComponentsRepo, ...ComponentsRepo[]]\n): ComponentsRepo;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---creating-a-new-component-repo-from-2-repos\"\n    }}>{`Example - creating a new component repo from 2 repos`}</h3>\n    <p>{`With this example we assume we have two component repos, `}<inlineCode parentName=\"p\">{`formLayoutRepo`}</inlineCode>{` for our form layout components and\n`}<inlineCode parentName=\"p\">{`inputsRepo`}</inlineCode>{` for input components. We create a new repo by`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import {composeRepos} from '@autoviews/core';\n\nconst newRepo = composeRepos(\n  {name: 'RepoToRenderForms'},\n  formLayoutRepo,\n  inputsRepo\n);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MDXContext","useMDXComponents","components","contextComponents","allComponents","MDXProvider","props","Provider","children","DEFAULTS","inlineCode","wrapper","_ref","MDXCreateElement","ref","propComponents","mdxType","originalType","parentName","etc","type","Component","concat","createElement","args","argsLength","createElementArgArray","Array","newProps","hasOwnProperty","displayName","frontMatter","contentTitle","metadata","assets","toc","id","level","layoutProps","MDXContent","isMDXComponent"],"sourceRoot":""}