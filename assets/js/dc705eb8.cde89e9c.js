"use strict";(self.webpackChunk_autoviews_website=self.webpackChunk_autoviews_website||[]).push([[390],{2138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>y,frontMatter:()=>d,metadata:()=>c,toc:()=>f});var o={};t.r(o),t.d(o,{dependencies:()=>p,files:()=>s,options:()=>l});var a=t(7462),r=(t(7294),t(3905)),i=t(8155);const s={"/App.tsx":"import React from 'react';\nimport {\n    RepositoryProvider,\n    AutoView,\n    CoreSchemaMetaSchema,\n    getHints,\n    orderToTemplateAreas\n} from '@autoviews/core';\n\nimport {data} from './data';\nimport schema from './schema.json';\nimport {repo} from './repo';\nimport {userUISchema} from './UISchema';\n\nconst layoutStyles = `\n.root {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 1fr;\n    gap: 1rem;\n    align-items: stretch;\n}\n\n.child {\n    padding: 5px;\n    border: 1px solid gray;\n}\n`;\nconst layoutedRepo = repo\n    .clone('LayoutRepo')\n    .addWrapper(\n        (item, props) => {\n            const {order} = getHints(props.uiSchema, props.pointer);\n            return (\n                <>\n                    <style>{layoutStyles}</style>\n                    <div\n                        className=\"root\"\n                        style={{gridTemplateAreas: orderToTemplateAreas(order)}}\n                    >\n                        {item}\n                    </div>\n                </>\n            );\n        },\n        {include: ['MyObject']}\n    )\n    .addWrapper(\n        (item, props) => {\n            return (\n                <div\n                    style={{gridArea: props.field}}\n                    className=\"child\"\n                >\n                    {props.field + ': '}\n                    <strong>{item}</strong>\n                </div>\n            );\n        },\n        {exclude: ['MyObject']}\n    );\n\nexport default function App() {\n    return (\n        <RepositoryProvider components={layoutedRepo}>\n            <AutoView\n                schema={schema as CoreSchemaMetaSchema}\n                data={data}\n                uiSchema={userUISchema}\n            />\n        </RepositoryProvider>\n    );\n}\n","/UISchema.js":"import {createUISchema, UISchema} from '@autoviews/core';\n\nexport const userUISchema: UISchema = createUISchema(\n    {},\n    {\n        '': {\n            order: ['login', ['active', 'age']]\n        }\n    }\n);\n","/repo.tsx":"import React from 'react';\nimport {ComponentsRepo, AutoFields} from '@autoviews/core';\n\nexport const repo = new ComponentsRepo('BaseRepo')\n    .register('object', {\n        name: 'MyObject',\n        component: AutoFields\n    })\n    .register('string', {\n        name: 'MyStringComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .register('number', {\n        name: 'MyNumberComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .register('boolean', {\n        name: 'MyBooleanComponent',\n        component: props => <span>{props.data ? 'online' : 'offline'}</span>\n    });\n","/schema.json":'{\n  "type": "object",\n  "properties": {\n    "login": {\n      "type": "string"\n    },\n    "age": {\n      "type": "number"\n    },\n    "active": {\n      "type": "boolean"\n    }\n  }\n}\n',"/data.js":"export const data = {\n    login: 'johondoe',\n    age: 21,\n    active: true\n};\n"},p={"@mui/material":"^5.3.1","@emotion/react":"^11.7.1","@emotion/styled":"^11.6.0",lodash:"^4.17.21"},l={activePath:"/App.tsx"},d={},m="Layout",c={unversionedId:"examples/layout",id:"examples/layout",title:"Layout",description:"It is possible to define and persist layout settings using order field in UIHints.",source:"@site/docs/examples/layout.md",sourceDirName:"examples",slug:"/examples/layout",permalink:"/autoviews/docs/examples/layout",draft:!1,editUrl:"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/layout.md",tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"AutoHeaders usage",permalink:"/autoviews/docs/examples/table-with-header"}},u={},f=[{value:"Examples",id:"examples",level:2}],h={toc:f};function y(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"layout"},"Layout"),(0,r.kt)("p",null,"It is possible to define and persist layout settings using ",(0,r.kt)("inlineCode",{parentName:"p"},"order")," field in ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/ui-schema#the-hints-ui-hint"},"UIHints"),"."),(0,r.kt)("p",null,"By default ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/ui-schema#example---the-order-and-hidden-hints"},"order")," is an array of strings, simply defining order of fields in the object type."),(0,r.kt)("p",null,"However order could be also a mix of strings and strings arrays. Like ",(0,r.kt)("inlineCode",{parentName:"p"},"['field-1', ['field-2', 'field-4'], 'field-3']"),". It is very neat to convert that type of defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"order")," into CSS Grid definitions, specifically ",(0,r.kt)("inlineCode",{parentName:"p"},"grid-template-areas")," and then, when rendering children it becomes easy to set ",(0,r.kt)("inlineCode",{parentName:"p"},"grid-area")," style with the current field name."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)(i.B,(0,a.Z)({},o,{mdxType:"Demo"})),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@autoviews/core")," provides ",(0,r.kt)("inlineCode",{parentName:"p"},"orderToTemplateAreas")," utility:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const gridTemplateAreas = orderToTemplateAreas([\n  'field-1',\n  ['field-2', 'field-4'],\n  'field-3'\n]);\n\n/**\n Result\n '\"field-1 field-1\"\n \"field-2 field-4\"\n \"field-3 field-3\"'\n*/\n")),(0,r.kt)("p",null,"It consider some edge cases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const gridTemplateAreas = orderToTemplateAreas([\n  ['field-1', 'field-3'][('field-1', 'field-2', 'field-4')]\n]);\n\n/**\n Result\n '\"field-1 field-3 .\"\n \"field-1 field-2, field-4\"'\n*/\n")),(0,r.kt)("p",null,"And of course you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"'.'"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const gridTemplateAreas = orderToTemplateAreas([\n    ['field-1', '.', 'field-2']\n    'field-3'\n])\n\n/**\n Result\n '\"field-1 . field-2\"\n \"field-3 field-3, field-3\"'\n*/\n")))}y.isMDXComponent=!0}}]);
//# sourceMappingURL=dc705eb8.cde89e9c.js.map