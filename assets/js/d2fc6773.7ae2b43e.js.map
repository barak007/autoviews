{"version":3,"file":"assets/js/d2fc6773.7ae2b43e.js","mappings":"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","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/table-with-header/schema.json","webpack://@autoviews/website/./src/examples/table-with-header/index.ts","webpack://@autoviews/website/./src/examples/table-with-header/app.tsx","webpack://@autoviews/website/./src/examples/table-with-header/repo.tsx","webpack://@autoviews/website/./src/examples/table-with-header/data.ts","webpack://@autoviews/website/./src/examples/table-with-header/UISchema.ts","webpack://@autoviews/website/./docs/entities/array-components.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {colorMode} = useColorMode();\n    return (\n        <Sandpack\n            theme={colorMode}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","export default \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"login\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"title\\\": \\\"User Login\\\"\\n      },\\n      \\\"age\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"title\\\": \\\"Age\\\"\\n      },\\n      \\\"active\\\": {\\n        \\\"type\\\": \\\"boolean\\\",\\n        \\\"title\\\": \\\"Status\\\"\\n      }\\n    }\\n  }\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\nimport userUISchema from './UISchema?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.ts': data,\n    '/UISchema.ts': userUISchema\n};\n\nexport const dependencies: DemoDependencies = {\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\nimport {userUISchema} from './UISchema';\\n\\nexport default function App() {\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={data}\\n                uiSchema={userUISchema}\\n            />\\n        </RepositoryProvider>\\n    );\\n}\\n\";","export default \"import React from 'react';\\nimport {\\n    ComponentsRepo,\\n    AutoFields,\\n    AutoItems,\\n    AutoHeaders\\n} from '@autoviews/core';\\nimport {\\n    Table,\\n    TableContainer,\\n    Paper,\\n    TableHead,\\n    TableRow,\\n    TableCell,\\n    TableBody\\n} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('MyTableRepo')\\n    .register('array', {\\n        name: 'MyTableComponent',\\n        component: props => {\\n            return (\\n                <TableContainer\\n                    component={Paper}\\n                    sx={{margin: '10px'}}\\n                >\\n                    <Table>\\n                        <TableHead>\\n                            <TableRow>\\n                                <AutoHeaders\\n                                    {...props}\\n                                    path=\\\"/items\\\"\\n                                >\\n                                    {headerProps => (\\n                                        <AutoItems {...headerProps} />\\n                                    )}\\n                                </AutoHeaders>\\n                            </TableRow>\\n                        </TableHead>\\n                        <TableBody>\\n                            <AutoItems {...props} />\\n                        </TableBody>\\n                    </Table>\\n                </TableContainer>\\n            );\\n        }\\n    })\\n    .register('object', {\\n        name: 'MyTableRow',\\n        component: props => (\\n            <TableRow>\\n                <AutoFields {...props} />\\n            </TableRow>\\n        )\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('number', {\\n        name: 'MyNumberComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => {\\n            const isOnline = props.data;\\n            return (\\n                <span style={{color: isOnline ? 'green' : 'red'}}>\\n                    {isOnline ? 'online' : 'offline'}\\n                </span>\\n            );\\n        }\\n    })\\n    .addWrapper(item => <TableCell>{item}</TableCell>, {\\n        include: [\\n            'MyStringComponent',\\n            'MyBooleanComponent',\\n            'MyNumberComponent'\\n        ]\\n    });\\n\";","export default \"export const data = [\\n    {\\n        login: 'johondoe',\\n        age: 21,\\n        active: true\\n    },\\n    {\\n        login: 'janedoe',\\n        age: 20,\\n        active: false\\n    }\\n];\\n\";","export default \"import {createUISchema, UISchema} from '@autoviews/core';\\n\\nexport const userUISchema: UISchema = createUISchema(\\n    {},\\n    {\\n        '/items': {\\n            order: ['active', 'login', 'age']\\n        }\\n    }\\n);\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Creating Array components';\nexport const metadata = {\n  \"unversionedId\": \"entities/array-components\",\n  \"id\": \"entities/array-components\",\n  \"title\": \"Creating Array components\",\n  \"description\": \"AutoViews does not come with pre-made components to render arrays (doing so will defeat the idea of\",\n  \"source\": \"@site/docs/entities/array-components.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/array-components\",\n  \"permalink\": \"/autoviews/docs/entities/array-components\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/array-components.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"The Components Repository\",\n    \"permalink\": \"/autoviews/docs/entities/components-repo\"\n  },\n  \"next\": {\n    \"title\": \"Creating Object components\",\n    \"permalink\": \"/autoviews/docs/entities/object-components\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/table-with-header';\nexport const toc = [{\n  value: 'AutoItems',\n  id: 'autoitems',\n  level: 2\n}, {\n  value: '<code>AutoItems</code> props',\n  id: 'autoitems-props',\n  level: 3\n}, {\n  value: 'the render function',\n  id: 'the-render-function',\n  level: 3\n}, {\n  value: 'Example - rendering a plain list',\n  id: 'example---rendering-a-plain-list',\n  level: 3\n}, {\n  value: 'Example - rendering an HTML list',\n  id: 'example---rendering-an-html-list',\n  level: 3\n}, {\n  value: 'Example - rending an HTML table',\n  id: 'example---rending-an-html-table',\n  level: 3\n}, {\n  value: 'Example - rending an HTML Table with headers (AutoHeaders)',\n  id: 'example---rending-an-html-table-with-headers-autoheaders',\n  level: 3\n}, {\n  value: 'AutoHeaders',\n  id: 'autoheaders',\n  level: 4\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"creating-array-components\"\n    }}>{`Creating Array components`}</h1>\n    <p>{`AutoViews does not come with pre-made components to render arrays (doing so will defeat the idea of\nusing your own components). However, AutoViews provides utilities and APIs to create your own components\nto render arrays.`}</p>\n    <p>{`The simplest array component will be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ArrayRepo').register('array', {\n  name: 'tableComponent',\n  component: props => <AutoItems {...props} />\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"autoitems\"\n    }}>{`AutoItems`}</h2>\n    <p><inlineCode parentName=\"p\">{`AutoItems`}</inlineCode>{` is a utility element used to render the elements of the array.\nInternally it apply `}<inlineCode parentName=\"p\">{`AutoViews`}</inlineCode>{` for each of the items of the array.`}</p>\n    <p>{`It can be used with array of objects, strings, numbers or other types, including mixed type arrays, delegating\nto `}<inlineCode parentName=\"p\">{`AutoViews`}</inlineCode>{` to render the actual item.`}</p>\n    <h3 {...{\n      \"id\": \"autoitems-props\"\n    }}><inlineCode parentName=\"h3\">{`AutoItems`}</inlineCode>{` props`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`extending `}<inlineCode parentName=\"li\">{`AutoViewProps`}</inlineCode>{` - getting the same properties as `}<inlineCode parentName=\"li\">{`AutoViews`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode>{` - optional callback to apply to each of the rendered array elements`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"the-render-function\"\n    }}>{`the render function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`declare function render(\n  item: React.ReactNode,\n  props: AutoViewProps,\n  index: number\n): React.ReactNode;\n`}</code></pre>\n    <p>{`The render callback parameters`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`item`}</inlineCode>{` - the rendered item, rendered using `}<inlineCode parentName=\"li\">{`AutoViews`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`props`}</inlineCode>{` - the `}<inlineCode parentName=\"li\">{`AutoViewProps`}</inlineCode>{` used to render the item.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`index`}</inlineCode>{` - the index of the item in the array`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example---rendering-a-plain-list\"\n    }}>{`Example - rendering a plain list`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ArrayRepo').register('array', {\n  name: 'tableComponent',\n  component: props => <AutoItems {...props} />\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---rendering-an-html-list\"\n    }}>{`Example - rendering an HTML list`}</h3>\n    <p>{`This example renders an HTML list.\nThe example is using `}<inlineCode parentName=\"p\">{`AutoItems.render`}</inlineCode>{` to wrap the per item element (`}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` below) with the list `}<inlineCode parentName=\"p\">{`<li>`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ArrayRepo').register('array', {\n  name: 'tableComponent',\n  component: props => (\n    <ul>\n      <AutoItems\n        {...props}\n        render={node => <li>node</li>}\n      ></AutoItems>\n    </ul>\n  )\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---rending-an-html-table\"\n    }}>{`Example - rending an HTML table`}</h3>\n    <p>{`Assuming out data has the form `}<inlineCode parentName=\"p\">{`Array<object>`}</inlineCode>{`,\nThis example renders the table using `}<inlineCode parentName=\"p\">{`AutoItems`}</inlineCode>{` which delegates to `}<inlineCode parentName=\"p\">{`AutoViews`}</inlineCode>{` to render\nthe `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{`. AutoViews will then use the `}<inlineCode parentName=\"p\">{`tablrRowComponent`}</inlineCode>{`, which renders the `}<inlineCode parentName=\"p\">{`<tr>`}</inlineCode>{` element\nand is using the `}<inlineCode parentName=\"p\">{`AutoFields`}</inlineCode>{` to render the members of the object.\nthe example is also using the `}<inlineCode parentName=\"p\">{`AutoFields.render`}</inlineCode>{` property to wrap the fields controls with `}<inlineCode parentName=\"p\">{`<td>`}</inlineCode>{` elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ArrayRepo')\n  .register('array', {\n    name: 'tableComponent',\n    component: props => (\n      <table>\n        <tbody>\n          <AutoItems {...props} />\n        </tbody>\n      </table>\n    )\n  })\n  .register('object', {\n    name: 'tableRowComponent',\n    component: props => (\n      <tr>\n        <AutoFields\n          {...props}\n          render={node => <td>node</td>}\n        />\n      </tr>\n    )\n  });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---rending-an-html-table-with-headers-autoheaders\"\n    }}>{`Example - rending an HTML Table with headers (AutoHeaders)`}</h3>\n    <p>{`While rendering an array of objects as a table, displaying a proper header based on `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{` is tricky. First, you must extract the `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` from each node or the object's field name.`}</p>\n    <p>{`Moreover, it is needed to consider all structural rules applied for that schema, like `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/ui-schema#the-hints-ui-hint\"\n      }}><inlineCode parentName=\"a\">{`UIHints`}</inlineCode></a>{` or `}<inlineCode parentName=\"p\">{`pick`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`omit`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/basic/autoview#properties-of-the-autoview-component\"\n      }}>{`properties`}</a>{`.`}</p>\n    <p>{`It was inconvenient to do it manually, even though we provided utils to extract `}<inlineCode parentName=\"p\">{`UIHints`}</inlineCode>{` and order fields according to rules. So we are introducing the `}<inlineCode parentName=\"p\">{`AutoHeaders`}</inlineCode>{` component.`}</p>\n    <h4 {...{\n      \"id\": \"autoheaders\"\n    }}>{`AutoHeaders`}</h4>\n    <p>{`To render a table with a header, you can find the `}<inlineCode parentName=\"p\">{`AutoHeaders`}</inlineCode>{` helpful component.`}</p>\n    <p>{`This component requires you to path `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/basic/autoview#properties-of-the-autoview-component\"\n      }}><inlineCode parentName=\"a\">{`AutoViewProps`}</inlineCode></a>{` and an optional:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: the `}<inlineCode parentName=\"li\">{`JSONPointer`}</inlineCode>{` to object schema relative to its `}<inlineCode parentName=\"li\">{`props.schema`}</inlineCode>{`; if your schema type is `}<inlineCode parentName=\"li\">{`array`}</inlineCode>{`, then you might want to path `}<inlineCode parentName=\"li\">{`/items`}</inlineCode>{`. The default value is root: `}<inlineCode parentName=\"li\">{`''`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useAsValue`}</inlineCode>{`: possible values are `}<inlineCode parentName=\"li\">{`field`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`title`}</inlineCode>{`; by using it, you define what should be used as header value, either object's property name or schema's `}<inlineCode parentName=\"li\">{`title`}</inlineCode>{` field value.`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` type is `}<inlineCode parentName=\"p\">{`(props: AutoViewProps) => JSX.Element;`}</inlineCode>{`.\nA function that would get a new `}<inlineCode parentName=\"p\">{`AutoViewProps`}</inlineCode>{` as an argument and would contain `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` as an `}<inlineCode parentName=\"p\">{`string[]`}</inlineCode>{` and a new `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{` for an array of strings.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Having this schema\nconst schema: CoreSchemaMetaSchema = {\n  type: 'object',\n  properties: {\n    foo: {type: 'string', title: 'Foo'},\n    bar: {type: 'string', title: 'Bar'},\n    baz: {type: 'number', title: 'Baz'}\n}\n//...\n<AutoHeaders schema={schema}>\n    {props => {\n        /*\n         * The new \\`props.data\\` would be \\`['Foo', 'Bar', 'Baz']\\`.\n         * And the new \\`props.schema\\` would complement this data\n        */\n        return <AutoItems {...props} />\n    }}\n</AutoHeaders>\n`}</code></pre>\n    <p>{`Let's look at full example of table with header.`}</p>\n\n\n    <Demo {...demo} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","colorMode","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}