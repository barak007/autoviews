{"version":3,"file":"assets/js/7ebb207b.afb8a6e2.js","mappings":"kQAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,WACfC,EAAW,CACtB,cAAiB,qBACjB,GAAM,qBACN,MAAS,WACT,YAAe,mGACf,OAAU,mCACV,cAAiB,WACjB,KAAQ,sBACR,UAAa,qCACb,OAAS,EACT,QAAW,4FACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,kBACT,UAAa,4CAEf,KAAQ,CACN,MAAS,SACT,UAAa,oCAGJC,EAAS,CAEtB,EAGaC,EAAM,CAAC,CAClBC,MAAO,iCACPC,GAAI,oBACJC,MAAO,GACN,CACDF,MAAO,sCACPC,GAAI,yBACJC,MAAO,GACN,CACDF,MAAO,wCACPC,GAAI,2BACJC,MAAO,GACN,CACDF,MAAO,kCACPC,GAAI,kCACJC,MAAO,GACN,CACDF,MAAO,2CACPC,GAAI,2CACJC,MAAO,GACN,CACDF,MAAO,iCACPC,GAAI,oBACJC,MAAO,GACN,CACDF,MAAO,iEACPC,GAAI,uCACJC,MAAO,GACN,CACDF,MAAO,2CACPC,GAAI,8BACJC,MAAO,GACN,CACDF,MAAO,oCACPC,GAAI,uBACJC,MAAO,GACN,CACDF,MAAO,+CACPC,GAAI,+CACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAW,GAG/B,IAH+B,WACjCC,KACGC,GACJ,EACC,OAAO,QALS,WAKC,UAAKH,EAAiBG,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAE5E,cACE,GAAM,YACH,aACL,iBAAK,iBAAe,sBAAYC,WAAW,KAAM,YAAyB,gDAA8C,sBAAYA,WAAW,KAAM,YAAyB,0LAG9K,cACE,GAAM,qBACH,aAAW,sBAAYA,WAAW,MAAO,cAC9C,iBAAK,gCAA8B,sBAAYA,WAAW,KAAM,YAAyB,oMAEzF,iBAAK,QAAM,sBAAYA,WAAW,KAAM,YAAyB,+JACjC,aAAGA,WAAW,IAC1C,KAAQ,8DACL,oCAAwC,2BAC/C,cACE,GAAM,0BACH,kBAAgB,sBAAYA,WAAW,MAAO,cACnD,sBACE,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,MACN,SACL,cAAIA,WAAW,KACb,MAAS,MACN,SACL,cAAIA,WAAW,KACb,MAAS,MACN,kBACL,cAAIA,WAAW,KACb,MAAS,MACN,kBAGT,iBAAOA,WAAW,UAChB,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,WACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,sBACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,QACjC,cAAIA,WAAW,KACb,MAAS,MACN,qBAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,2BACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,aACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,qBAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,kCACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,yBACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,gFAA8E,sBAAYA,WAAW,MAAO,UAAuB,kBAAgB,aAAGA,WAAW,KAClK,KAAQ,oCACL,wBAA4B,8BAErC,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,mCACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,cACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,uDAAqD,aAAGA,WAAW,KACpE,KAAQ,oCACL,wBAA4B,+BAErC,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,qCACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,eACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,sCAAoC,aAAGA,WAAW,KACnD,KAAQ,oCACL,wBAA4B,+BAErC,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,0CACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,YACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,yCAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,2CACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,YACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,0CAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,4CACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,cACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,kBAAgB,sBAAYA,WAAW,MAAO,UAAuB,wCAE5E,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,sCACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,iBACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,6IAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,gBACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,4BACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,QACjC,cAAIA,WAAW,KACb,MAAS,MACN,uDAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,8BACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,kBACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,4EAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,gDACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,sBACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,sFAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,qDACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,YACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,yHAEP,cAAIA,WAAW,UACb,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,wDACjC,cAAIA,WAAW,KACb,MAAS,OACR,sBAAYA,WAAW,MAAO,SACjC,cAAIA,WAAW,KACb,MAAS,QAEX,cAAIA,WAAW,KACb,MAAS,MACN,8DAIX,cACE,GAAM,4BACH,QAAM,sBAAYA,WAAW,MAAO,cAA2B,eACpE,iBAAK,QAAM,sBAAYA,WAAW,KAAM,cAA2B,cAAY,sBAAYA,WAAW,KAAM,YAAyB,wEAC9G,sBAAYA,WAAW,KAAM,eAA4B,8CAA4C,sBAAYA,WAAW,KAAM,WAAwB,gCACjL,iBAAK,gBAAc,sBAAYA,WAAW,KAAM,eAA4B,+CAA6C,aAAGA,WAAW,IACnI,KAAQ,0FACL,6BAAiC,0HAExC,iBAAK,QAAM,sBAAYA,WAAW,KAAM,cAA2B,2CAAyC,aAAGA,WAAW,IACtH,KAAQ,uCACL,eAAmB,iBAAe,sBAAYA,WAAW,KAAM,cAA2B,gCACzE,sBAAYA,WAAW,KAAM,QAAqB,uBAC1E,cACE,GAAM,mCACH,oCACL,iBAAK,QAAM,sBAAYA,WAAW,KAAM,uBAAoC,oFAAkF,sBAAYA,WAAW,KAAM,YAAyB,MACpN,iBAAK,sCACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,qPASP,cACE,GAAM,4CACH,6CACL,iBAAK,2CAAyC,sBAAYA,WAAW,KAAM,cAA2B,kEACtG,mBACE,cAAIA,WAAW,MAAO,8EACtB,cAAIA,WAAW,MAAO,4BACtB,cAAIA,WAAW,MAAO,mCAExB,iBAAK,oCACL,mBACE,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,SAAsB,sCAChF,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,UAAuB,sDACjF,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,WAAwB,yCAClF,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,UAAuB,4EAEnF,iBAAK,QAAM,sBAAYA,WAAW,KAAM,YAAyB,oBACjE,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,8VAkBP,iBAAK,+CAA6C,sBAAYA,WAAW,KAAM,WAAwB,wBAAsB,sBAAYA,WAAW,KAAM,iBAA8B,4CAA0C,sBAAYA,WAAW,KAAM,UAAuB,WACtR,iBAAK,oCACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,8jBAyBP,iBAAK,yBACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,yZAuBP,cACE,GAAM,qBACH,QAAM,sBAAYA,WAAW,MAAO,SAAsB,aAC/D,iBAAK,QAAM,sBAAYA,WAAW,KAAM,SAAsB,6DAA2D,sBAAYA,WAAW,KAAM,UAAuB,mBAAiB,sBAAYA,WAAW,KAAM,kBAA+B,4GAE1P,iBAAK,QAAM,sBAAYA,WAAW,KAAM,SAAsB,yCAAuC,sBAAYA,WAAW,KAAM,eAA4B,iBAAe,sBAAYA,WAAW,KAAM,cAA2B,8CACrO,iBAAK,2CACL,mBACE,cAAIA,WAAW,MAAO,uBAExB,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,SAAsB,8GAA4G,sBAAYA,WAAW,MAAO,SAAsB,aAAW,sBAAYA,WAAW,MAAO,wBAAqC,2CAAyC,aAAGA,WAAW,KACzW,KAAQ,yBACL,aACP,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,UAAuB,iCACzE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,aAA0B,wCAE9E,cACE,MAAS,IAET,cAAIA,WAAW,MAAO,oBAExB,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,YAAyB,2EAC3E,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,gBAA6B,4BAC/E,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,iBAA8B,6BAChF,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,kBAA+B,6EAEnF,iBAAK,sDAAoD,sBAAYA,WAAW,KAAM,oBAAiC,SAAO,sBAAYA,WAAW,KAAM,aAA0B,MACrL,mBACE,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,oBAAiC,4HACnF,cAAIA,WAAW,OAAK,sBAAYA,WAAW,MAAO,aAA0B,+FAE9E,cACE,GAAM,wCACH,kBAAgB,sBAAYA,WAAW,MAAO,SAAsB,SAAO,sBAAYA,WAAW,MAAO,UAAuB,WACrI,iBAAK,sCAAoC,sBAAYA,WAAW,KAAM,SAAsB,SAAO,sBAAYA,WAAW,KAAM,UAAuB,wBAAsB,sBAAYA,WAAW,KAAM,cAA2B,gBACrO,mBACE,cAAIA,WAAW,MAAO,wBAAsB,sBAAYA,WAAW,MAAO,SAAsB,MAAI,sBAAYA,WAAW,MAAO,WAAwB,MAAI,sBAAYA,WAAW,MAAO,UAAuB,MACnN,cAAIA,WAAW,MAAO,aAAW,sBAAYA,WAAW,MAAO,UAAuB,aAExF,iBAAK,sCACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,0cAwBP,iBAAK,aAAW,sBAAYA,WAAW,KAAM,UAAuB,kCAAgC,sBAAYA,WAAW,KAAM,UAAuB,SAAO,sBAAYA,WAAW,KAAM,SAAsB,4BAA0B,aAAGA,WAAW,IACtP,KAAQ,oCACL,8BAAkC,6BACrB,sBAAYA,WAAW,KAAM,UAAuB,sBACxE,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,iMAOP,cACE,GAAM,+BACH,kBAAgB,sBAAYA,WAAW,MAAO,YAAyB,UAC5E,iBAAK,sCAAoC,sBAAYA,WAAW,KAAM,YAAyB,2BAC/F,mBACE,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,SAAsB,SAAO,sBAAYA,WAAW,MAAO,WAAwB,yBAC7I,cAAIA,WAAW,MAAO,QAAM,sBAAYA,WAAW,MAAO,UAAuB,SAAO,sBAAYA,WAAW,MAAO,UAAuB,gCAE/I,iBAAK,2CAAyC,sBAAYA,WAAW,KAAM,UAAuB,4BAClG,mBACE,cAAIA,WAAW,MAAO,iCAA+B,sBAAYA,WAAW,MAAO,SAAsB,UACzG,cAAIA,WAAW,MAAO,sBAAoB,sBAAYA,WAAW,MAAO,QAAqB,kDAE/F,iBAAK,sCACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,wpBAkCP,iBAAK,YAAU,sBAAYA,WAAW,KAAM,UAAuB,uBACnE,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,04BAmCP,iBAAK,mBAAiB,sBAAYA,WAAW,KAAM,UAAuB,2BAC1E,mBACE,cAAIA,WAAW,MAAO,iBAAe,sBAAYA,WAAW,MAAO,YAAyB,eAAa,sBAAYA,WAAW,MAAO,YAAyB,cAChK,cAAIA,WAAW,MAAO,oCAAkC,sBAAYA,WAAW,MAAO,QAAqB,YAC3G,cAAIA,WAAW,MAAO,cAAY,sBAAYA,WAAW,MAAO,cAA2B,qBAAmB,sBAAYA,WAAW,MAAO,QAAqB,sDAC/J,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAO,cAAY,sBAAYA,WAAW,MAAO,4BAAyC,kEAAgE,sBAAYA,WAAW,MAAO,oBAAiC,SAAO,sBAAYA,WAAW,MAAO,aAA0B,cAI7S,cACE,GAAM,wBACH,QAAM,sBAAYA,WAAW,MAAO,YAAyB,aAClE,iBAAK,yCAAuC,sBAAYA,WAAW,KAAM,SAAsB,SAAO,sBAAYA,WAAW,KAAM,UAAuB,kBAAgB,sBAAYA,WAAW,KAAM,YAAyB,2DAC9N,sBAAYA,WAAW,KAAM,YAAyB,0DAAwD,sBAAYA,WAAW,KAAM,eAA4B,MACzK,cACE,GAAM,gDACH,iDACL,iBAAK,4FACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,0iBAuBX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://@autoviews/website/./docs/entities/ui-schema.md"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'UISchema';\nexport const metadata = {\n  \"unversionedId\": \"entities/ui-schema\",\n  \"id\": \"entities/ui-schema\",\n  \"title\": \"UISchema\",\n  \"description\": \"The optional UISchema represents additional instructions for how AutoView is to render the data.\",\n  \"source\": \"@site/docs/entities/ui-schema.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/ui-schema\",\n  \"permalink\": \"/autoviews/docs/entities/ui-schema\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/ui-schema.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"The JSON Schema\",\n    \"permalink\": \"/autoviews/docs/entities/the-json-schema\"\n  },\n  \"next\": {\n    \"title\": \"Events\",\n    \"permalink\": \"/autoviews/docs/entities/events\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Usage of <code>UISchema</code>',\n  id: 'usage-of-uischema',\n  level: 2\n}, {\n  value: 'Properties of <code>UISchema</code>',\n  id: 'properties-of-uischema',\n  level: 2\n}, {\n  value: 'the <code>components</code> overrides',\n  id: 'the-components-overrides',\n  level: 2\n}, {\n  value: 'the getComponentOptions utility',\n  id: 'the-getcomponentoptions-utility',\n  level: 3\n}, {\n  value: 'Example - component override and options',\n  id: 'example---component-override-and-options',\n  level: 3\n}, {\n  value: 'The <code>hints</code> UI hint',\n  id: 'the-hints-ui-hint',\n  level: 2\n}, {\n  value: 'Example - the <code>order</code> and <code>hidden</code> hints',\n  id: 'example---the-order-and-hidden-hints',\n  level: 3\n}, {\n  value: 'Example - the <code>uiGroups</code> hint',\n  id: 'example---the-uigroups-hint',\n  level: 3\n}, {\n  value: 'the <code>getHints</code> utility',\n  id: 'the-gethints-utility',\n  level: 2\n}, {\n  value: 'Example - extract the order and hidden hints',\n  id: 'example---extract-the-order-and-hidden-hints',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"uischema\"\n    }}>{`UISchema`}</h1>\n    <p>{`The optional `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` represents additional instructions for how `}<inlineCode parentName=\"p\">{`AutoView`}</inlineCode>{` is to render the data.\nIt is used to modify the rendered components, by selecting a specific component for a specific property,\nordering object properties or grouping properties.`}</p>\n    <h2 {...{\n      \"id\": \"usage-of-uischema\"\n    }}>{`Usage of `}<inlineCode parentName=\"h2\">{`UISchema`}</inlineCode></h2>\n    <p>{`The best practice is to use `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` allowing users to order or group fields or change which component to use for a field.\nIt can be used as a base for saving user setting views or as a way for applications to fine tune forms.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` is not the best tool to switch layouts (from gallery to cards to table) as it assumes all the components are available\nfor rendering. To switch layouts, `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/components-repo#using-multiple-repositories\"\n      }}>{`replacing a component repository`}</a>{` is a better solution.`}</p>\n    <h2 {...{\n      \"id\": \"properties-of-uischema\"\n    }}>{`Properties of `}<inlineCode parentName=\"h2\">{`UISchema`}</inlineCode></h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default Value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`UIHintsOverrides`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Hints to modify`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`UIHints`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Hints to modify`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .order`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(string/string[])[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines the desired order and/or layout of the fields to be rendered for an `}<inlineCode parentName=\"td\">{`object`}</inlineCode>{`. It is up to `}<a parentName=\"td\" {...{\n              \"href\": \"/docs/entities/object-components\"\n            }}>{`the object component`}</a>{` to use the order hints.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .hidden`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines which fields should be hidden. It is up to `}<a parentName=\"td\" {...{\n              \"href\": \"/docs/entities/object-components\"\n            }}>{`the object component`}</a>{` to use the hidden hints.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .uiGroups`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`UIGroup[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines field groups. It is up to `}<a parentName=\"td\" {...{\n              \"href\": \"/docs/entities/object-components\"\n            }}>{`the object component`}</a>{` to support field groups.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .uiGroups.name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines the name of a fields group.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .uiGroups.title`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines the title of a fields group.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .uiGroups.fields`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines which `}<inlineCode parentName=\"td\">{`object`}</inlineCode>{` fields are included in the group.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`hints[pointer:string] .autoFocus`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`JSONPointer`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines which component should be focused when first rendering the form. It is up to the components to implement support for Autofocus.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RepoPointersCollection`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines component overrides and component options`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`components[name: string]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RepoPointers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the Components Repository to apply the component hints to.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`compoennts[name: string] [pointer: string]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`ComponentOptions`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The location in the JSONSchema using JSONPointer to apply the component override`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`compoennts[name: string] [pointer: string].name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the component to use at the above location, which has to be available in the above component repository`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`compoennts[name: string] [pointer: string].options`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`any`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Options to pass to the component at the above location`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"the-components-overrides\"\n    }}>{`the `}<inlineCode parentName=\"h2\">{`components`}</inlineCode>{` overrides`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` field in `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` is responsible for component overrides -\ndefining which component `}<inlineCode parentName=\"p\">{`<AutoView/>`}</inlineCode>{` should choose for a given field and what `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` this component should get.`}</p>\n    <p>{`By default, `}<inlineCode parentName=\"p\">{`<AutoView/>`}</inlineCode>{` picks last component record registered in `}<a parentName=\"p\" {...{\n        \"href\": \"docs/entities/components-repo#registering-multiple-components-per-jsonschema-data-type\"\n      }}>{`the components repository`}</a>{` for each type.\nWhen registering two (or more) components for a specific type, the last one will be used by default.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` overrides defines that for a specific `}<a parentName=\"p\" {...{\n        \"href\": \"https://tools.ietf.org/html/rfc6901\"\n      }}>{`JSONPointer`}</a>{` in the data `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{`\na component with specific `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` should be chosen.`}</p>\n    <h3 {...{\n      \"id\": \"the-getcomponentoptions-utility\"\n    }}>{`the getComponentOptions utility`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getComponentOptions`}</inlineCode>{` utility function enables a component to extract the component options from the `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{`.`}</p>\n    <p>{`In most cases, it will be used as`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const myFunctionalComponent = props => {\n    let componentOptions  = getComponentOptions(\n        props.uiSchema!,\n        props.repositoryName,\n        props.schemaPointer\n    )\n    return (/*... the actual component */)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---component-override-and-options\"\n    }}>{`Example - component override and options`}</h3>\n    <p>{`In this example we show how to use the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` overrides to render texts using one of three text components`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A styled text component, which gets the styles from the component options`}</li>\n      <li parentName=\"ol\">{`A header text component`}</li>\n      <li parentName=\"ol\">{`A Default paragraph component`}</li>\n    </ol>\n    <p>{`The example shows how to render`}</p>\n    <ol>\n      <li parentName=\"ol\">{`the `}<inlineCode parentName=\"li\">{`title`}</inlineCode>{` field using the header component`}</li>\n      <li parentName=\"ol\">{`the `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{` field using the styled component, with blue text`}</li>\n      <li parentName=\"ol\">{`the `}<inlineCode parentName=\"li\">{`content`}</inlineCode>{` field using the paragraph component`}</li>\n      <li parentName=\"ol\">{`the `}<inlineCode parentName=\"li\">{`status`}</inlineCode>{` field using the styled component, with blue background and white text`}</li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` to use is then`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const uiSchema: UISchema = {\n  components: {\n    MyRepo: {\n      title: {\n        name: 'headerText'\n      },\n      author: {\n        name: 'styledText',\n        options: {color: 'blue'}\n      },\n      status: {\n        name: 'styledText',\n        options: {color: 'white', backgroundColor: 'blue'}\n      }\n    }\n  }\n};\n`}</code></pre>\n    <p>{`Notice there is no need to define that the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` field is using the `}<inlineCode parentName=\"p\">{`paragraphText`}</inlineCode>{` as it is the default component for the `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` type.`}</p>\n    <p>{`Given the components repository`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo')\n  .register('string', {\n    name: 'styledText',\n    component: props => (\n      <span\n        style={getComponentOptions(\n          props.uiSchema!,\n          props.repositoryName,\n          props.schemaPointer\n        )}\n      >\n        {props.data}\n      </span>\n    )\n  })\n  .register('string', {\n    name: 'headerText',\n    component: props => <h1>{props.data}</h1>\n  })\n  .register('string', {\n    name: 'paragraphText',\n    component: props => <p>{props.data}</p>\n  });\n//... other components;\n`}</code></pre>\n    <p>{`And given the Schema`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const postSchema: CoreSchemaMetaSchema = {\n  $id: 'post',\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Post Title'\n    },\n    author: {\n      type: 'string',\n      title: 'Author'\n    },\n    content: {\n      type: 'string',\n      title: 'The Full Comment'\n    },\n    status: {\n      type: 'string',\n      title: 'Approval Status'\n    }\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-hints-ui-hint\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`hints`}</inlineCode>{` UI hint`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hints`}</inlineCode>{` member of UI hints defines additional instructions that `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` components in `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{` might implement.\nThe instructions, or hints, are field ordering, field hiding, grouping or autofocus.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`hints`}</inlineCode>{` UI hint defines that for a specific `}<inlineCode parentName=\"p\">{`JSONPointer`}</inlineCode>{` in the data `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{` specific instructions should be applied.`}</p>\n    <p>{`The Hints can be applied in twp ways -`}</p>\n    <ol>\n      <li parentName=\"ol\">{`without ui groups`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`order`}</inlineCode>{` defines fields to be rendered in a specific order, it is also possible to provide 2d array of strings in `}<inlineCode parentName=\"li\">{`order`}</inlineCode>{` and use `}<inlineCode parentName=\"li\">{`orderToTemplateAreas`}</inlineCode>{` utility for nice use within CSS Grid: `}<a parentName=\"li\" {...{\n          \"href\": \"/docs/examples/layout\"\n        }}>{`example`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hidden`}</inlineCode>{` defines fields to be hidden`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`autofocus`}</inlineCode>{` defines a field to be autofocused`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`with ui groups`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiGroups`}</inlineCode>{` defines a field group. Groups are to be rendered in the order defined`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiGroup.name`}</inlineCode>{` defines the group name`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiGroup.title`}</inlineCode>{` defines the group title`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`uiGroup.fields`}</inlineCode>{` defines the fields of the group, to be rendered in the specified order`}</li>\n    </ul>\n    <p>{`When using groups, there are two 'special' keys - `}<inlineCode parentName=\"p\">{`OTHER_PROPERTIES`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`UNGROUPED`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`OTHER_PROPERTIES`}</inlineCode>{` is a special 'field' key that signifies a named group includes all properties that are not included in any other group`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`UNGROUPED`}</inlineCode>{` is a special group that includes all properties that are not included in any other group`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example---the-order-and-hidden-hints\"\n    }}>{`Example - the `}<inlineCode parentName=\"h3\">{`order`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`hidden`}</inlineCode>{` hints`}</h3>\n    <p>{`This example shows how to use the `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hidden`}</inlineCode>{` hints on the above `}<inlineCode parentName=\"p\">{`postSchema`}</inlineCode>{` schema, to`}</p>\n    <ol>\n      <li parentName=\"ol\">{`order the fields as `}<inlineCode parentName=\"li\">{`title`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`content`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`hide the `}<inlineCode parentName=\"li\">{`status`}</inlineCode>{` field.`}</li>\n    </ol>\n    <p>{`The UISchema in this case will be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const uiSchema: UISchema = {\n  hints: {\n    '': {\n      order: ['title', 'content', 'author'],\n      hidden: ['status']\n    }\n  },\n  components: {\n    MyRepo: {\n      title: {\n        name: 'headerText'\n      },\n      author: {\n        name: 'styledText',\n        options: {color: 'blue'}\n      },\n      status: {\n        name: 'styledText',\n        options: {color: 'white', backgroundColor: 'blue'}\n      }\n    }\n  }\n};\n`}</code></pre>\n    <p>{`The repo `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` component has to support the `}<inlineCode parentName=\"p\">{`hidden`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` hints - see more about `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/object-components\"\n      }}>{`creating object components`}</a>{`.\nFor this example, the `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` component can be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo')\n  // ... other components\n  .register('object', {\n    name: 'MyObjectComponent',\n    component: props => <AutoFields {...props} />\n  });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---the-uigroups-hint\"\n    }}>{`Example - the `}<inlineCode parentName=\"h3\">{`uiGroups`}</inlineCode>{` hint`}</h3>\n    <p>{`This example shows how to use the `}<inlineCode parentName=\"p\">{`uiGroups`}</inlineCode>{` hint to group fields:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`title`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`content`}</inlineCode>{` fields as one group`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`status`}</inlineCode>{` fields as a second group.`}</li>\n    </ol>\n    <p>{`The example also shows how to build an `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` component that renders`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The groups separated with an `}<inlineCode parentName=\"li\">{`<hr/>`}</inlineCode>{` line`}</li>\n      <li parentName=\"ol\">{`The groups with a `}<inlineCode parentName=\"li\">{`<h2>`}</inlineCode>{` group title based on the group title field.`}</li>\n    </ol>\n    <p>{`The UISchema in this case will be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const uiSchema: UISchema = {\n  hints: {\n    '': {\n      uiGroups: [\n        {\n          name: 'group 1',\n          title: 'The Post',\n          fields: ['title', 'content']\n        },\n        {\n          name: 'group 2',\n          title: 'The Post Metadata',\n          fields: ['author', 'status']\n        }\n      ]\n    }\n  },\n  components: {\n    MyRepo: {\n      title: {\n        name: 'headerText'\n      },\n      author: {\n        name: 'styledText',\n        options: {color: 'blue'}\n      },\n      status: {\n        name: 'styledText',\n        options: {color: 'white', backgroundColor: 'blue'}\n      }\n    }\n  }\n};\n`}</code></pre>\n    <p>{`and the `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` component will be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo')\n  // ... other components\n  .register('object', {\n    name: 'MyObjectComponent',\n    component: props => {\n      const {uiGroups} = getHints(props.uiSchema, props.schemaPointer);\n\n      if (!uiGroups) {\n        return <AutoFields {...props} />;\n      }\n\n      return (\n        <>\n          {uiGroups.map(group => (\n            <>\n              <h2>{group.title}</h2>\n              <AutoFields\n                {...props}\n                pick={\n                  // this utility retrieves \\`OTHER_PROPERTIES\\` used in \\`UIGroups\\` as well\n                  getPropertiesByGroupName(\n                    uiGroups,\n                    group.name,\n                    Object.keys(props.data)\n                  )\n                }\n              />\n              <hr />\n            </>\n          ))}\n        </>\n      );\n    }\n  });\n`}</code></pre>\n    <p>{`With the above `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` component the example`}</p>\n    <ol>\n      <li parentName=\"ol\">{`extracts the `}<inlineCode parentName=\"li\">{`uiGroups`}</inlineCode>{` using the `}<inlineCode parentName=\"li\">{`getHints`}</inlineCode>{` utility.`}</li>\n      <li parentName=\"ol\">{`then for each group renders the `}<inlineCode parentName=\"li\">{`<h2>`}</inlineCode>{` title.`}</li>\n      <li parentName=\"ol\">{`using the `}<inlineCode parentName=\"li\">{`AutoFields`}</inlineCode>{` utility and the `}<inlineCode parentName=\"li\">{`pick`}</inlineCode>{` property to only render the fields of that group.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`using the `}<inlineCode parentName=\"li\">{`getPropertiesByGroupName`}</inlineCode>{` to get the field names of the group, taking into account the `}<inlineCode parentName=\"li\">{`OTHER_PROPERTIES`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`UNGROUPED`}</inlineCode>{` keys.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"the-gethints-utility\"\n    }}>{`the `}<inlineCode parentName=\"h2\">{`getHints`}</inlineCode>{` utility`}</h2>\n    <p>{`This example shows how to access the `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hidden`}</inlineCode>{` hints of the `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode>{` for the current object component to be rendered.\nThe `}<inlineCode parentName=\"p\">{`getHints`}</inlineCode>{` utility function lookups the hints given the current `}<inlineCode parentName=\"p\">{`JSONPointer`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example---extract-the-order-and-hidden-hints\"\n    }}>{`Example - extract the order and hidden hints`}</h3>\n    <p>{`The following component will only render the list of hints, not the actual object data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const myRepo = new ComponentsRepo('MyRepo')\n  // ... other components\n  .register('object', {\n    name: 'MyObjectComponent',\n    component: props => {\n      return (\n        <>\n          <div>\n            order list is:\n            {' ' +\n              getHints(props.uiSchema, props.schemaPointer).order?.join(', ')}\n          </div>\n          <div>\n            hidden list is:\n            {' ' +\n              getHints(props.uiSchema, props.schemaPointer).hidden?.join(', ')}\n          </div>\n        </>\n      );\n    }\n  });\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}