{"version":3,"file":"assets/js/24a4cfdb.afd09055.js","mappings":"oLAAA,MCQaA,EAAmB,CAC5B,WCTJ,okBDUI,YEVJ,s1EFWI,eDXJ,yVCYI,WGZJ,mMHaI,eIbJ,kOJgBaC,EAAiC,CAC1C,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCC,WAAY,W,gLKbT,MAAMC,EAAc,CAAC,EACfC,EAAe,oBACfC,EAAW,CACtB,cAAiB,6BACjB,GAAM,6BACN,MAAS,oBACT,YAAe,mFACf,OAAU,2CACV,cAAiB,WACjB,KAAQ,8BACR,UAAa,6CACb,OAAS,EACT,QAAW,oGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,WACX,SAAY,CACV,MAAS,wBACT,UAAa,wCAEf,KAAQ,CACN,MAAS,SACT,UAAa,oCAGJC,EAAS,CAEtB,EAIaC,EAAM,GAEbC,EAAc,CAClBD,OAGa,SAASE,EAAW,GAG/B,IAH+B,WACjCC,KACGC,GACJ,EACC,OAAO,QALS,WAKC,UAAKH,EAAiBG,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAC5E,cACE,GAAM,qBACH,sBAGL,iBAAK,iCAA+B,sBAAYC,WAAW,KAAM,eAA4B,8CAC/F,aAAGA,WAAW,IACR,KAAQ,mCACL,kBAAsB,sCAC7B,QAAC,KAAI,UAAKC,EAAI,CAAEF,QAAQ,UAE5B,CAEAH,EAAWM,gBAAiB,C","sources":["webpack://@autoviews/website/./src/examples/table-with-header/schema.json","webpack://@autoviews/website/./src/examples/table-with-header/index.ts","webpack://@autoviews/website/./src/examples/table-with-header/app.tsx","webpack://@autoviews/website/./src/examples/table-with-header/repo.tsx","webpack://@autoviews/website/./src/examples/table-with-header/data.ts","webpack://@autoviews/website/./src/examples/table-with-header/UISchema.ts","webpack://@autoviews/website/./docs/examples/table-with-header.md"],"sourcesContent":["export default \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"login\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"title\\\": \\\"User Login\\\"\\n      },\\n      \\\"age\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"title\\\": \\\"Age\\\"\\n      },\\n      \\\"active\\\": {\\n        \\\"type\\\": \\\"boolean\\\",\\n        \\\"title\\\": \\\"Status\\\"\\n      }\\n    }\\n  }\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\nimport userUISchema from './UISchema?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.ts': data,\n    '/UISchema.ts': userUISchema\n};\n\nexport const dependencies: DemoDependencies = {\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\nimport {userUISchema} from './UISchema';\\n\\nexport default function App() {\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={data}\\n                uiSchema={userUISchema}\\n            />\\n        </RepositoryProvider>\\n    );\\n}\\n\";","export default \"import React from 'react';\\nimport {\\n    ComponentsRepo,\\n    AutoFields,\\n    AutoItems,\\n    AutoHeaders\\n} from '@autoviews/core';\\nimport {\\n    Table,\\n    TableContainer,\\n    Paper,\\n    TableHead,\\n    TableRow,\\n    TableCell,\\n    TableBody\\n} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('MyTableRepo')\\n    .register('array', {\\n        name: 'MyTableComponent',\\n        component: props => {\\n            return (\\n                <TableContainer\\n                    component={Paper}\\n                    sx={{margin: '10px'}}\\n                >\\n                    <Table>\\n                        <TableHead>\\n                            <TableRow>\\n                                <AutoHeaders\\n                                    {...props}\\n                                    path=\\\"/items\\\"\\n                                >\\n                                    {headerProps => (\\n                                        <AutoItems {...headerProps} />\\n                                    )}\\n                                </AutoHeaders>\\n                            </TableRow>\\n                        </TableHead>\\n                        <TableBody>\\n                            <AutoItems {...props} />\\n                        </TableBody>\\n                    </Table>\\n                </TableContainer>\\n            );\\n        }\\n    })\\n    .register('object', {\\n        name: 'MyTableRow',\\n        component: props => (\\n            <TableRow>\\n                <AutoFields {...props} />\\n            </TableRow>\\n        )\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('number', {\\n        name: 'MyNumberComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => {\\n            const isOnline = props.data;\\n            return (\\n                <span style={{color: isOnline ? 'green' : 'red'}}>\\n                    {isOnline ? 'online' : 'offline'}\\n                </span>\\n            );\\n        }\\n    })\\n    .addWrapper(item => <TableCell>{item}</TableCell>, {\\n        include: [\\n            'MyStringComponent',\\n            'MyBooleanComponent',\\n            'MyNumberComponent'\\n        ]\\n    });\\n\";","export default \"export const data = [\\n    {\\n        login: 'johondoe',\\n        age: 21,\\n        active: true\\n    },\\n    {\\n        login: 'janedoe',\\n        age: 20,\\n        active: false\\n    }\\n];\\n\";","export default \"import {createUISchema, UISchema} from '@autoviews/core';\\n\\nexport const userUISchema: UISchema = createUISchema(\\n    {},\\n    {\\n        '/items': {\\n            order: ['active', 'login', 'age']\\n        }\\n    }\\n);\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'AutoHeaders usage';\nexport const metadata = {\n  \"unversionedId\": \"examples/table-with-header\",\n  \"id\": \"examples/table-with-header\",\n  \"title\": \"AutoHeaders usage\",\n  \"description\": \"This is the example of using AutoHeaders component to render table with headers.\",\n  \"source\": \"@site/docs/examples/table-with-header.md\",\n  \"sourceDirName\": \"examples\",\n  \"slug\": \"/examples/table-with-header\",\n  \"permalink\": \"/autoviews/docs/examples/table-with-header\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/table-with-header.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"examples\",\n  \"previous\": {\n    \"title\": \"Switch ComponentsRepo\",\n    \"permalink\": \"/autoviews/docs/examples/switch-repo\"\n  },\n  \"next\": {\n    \"title\": \"Layout\",\n    \"permalink\": \"/autoviews/docs/examples/layout\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/table-with-header';\nexport const toc = [];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"autoheaders-usage\"\n    }}>{`AutoHeaders usage`}</h1>\n\n\n    <p>{`This is the example of using `}<inlineCode parentName=\"p\">{`AutoHeaders`}</inlineCode>{` component to render table with headers.\n`}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/array-components\"\n      }}>{`Here read more`}</a>{` about creating array components.`}</p>\n    <Demo {...demo} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["files","dependencies","options","activePath","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","props","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}