{"version":3,"file":"assets/js/0ef6f249.7a435ee5.js","mappings":"4LAkBMA,EAAc,CAChB,kBAAmB,UAGhB,SAASC,EAAKC,GACjB,IAAOC,GAAaC,EAAAA,EAAAA,KAAbD,UACP,OACI,gBAAC,KAAD,CACIE,MAAOF,EACPG,SAAS,WACTC,YAAa,CACTC,MAAON,EAAMM,MACbC,aAAa,OAAD,UACLT,EACAE,EAAMO,eAGjBC,QAAO,eACHC,eAAe,EACfC,aAAc,IACdC,kBAAmB,CACf,8EACA,4EAEDX,EAAMQ,a,gYCnCZF,EAAmB,CAC5B,WCRJ,4xCDSI,YETJ,26DFUI,eGVJ,oQHWI,WIXJ,oMJcaC,EAAiC,CAC1C,eAAgB,SAChB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,UACnB,OAAU,YAGDC,EAAuB,CAChCI,WAAY,Y,iBKbHC,EAAc,GACdC,EAAe,gBACfC,EAAW,CACtB,cAAiB,mBACjB,GAAM,mBACN,MAAS,gBACT,YAAe,yLACf,OAAU,iCACV,cAAiB,WACjB,KAAQ,oBACR,UAAa,mCACb,OAAS,EACT,QAAW,0FACX,KAAQ,GACR,QAAW,UACX,YAAe,GACf,QAAW,WACX,SAAY,CACV,MAAS,WACT,UAAa,qCAEf,KAAQ,CACN,MAAS,wBACT,UAAa,yCAGJC,EAAS,GAMTC,EAAM,GAEbC,EAAc,CAClBD,IAAAA,GAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGpB,GACF,YACD,OAAO,QALS,WAKT,UAAekB,EAAiBlB,EAAhC,CAAuCoB,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,iBADR,kBAKA,oEAAsD,sBAAYC,WAAW,KAAvB,SAAtD,mBAA0H,sBAAYA,WAAW,KAAvB,gBAA1H,sCAAwN,aAAGA,WAAW,IAClO,KAAQ,2CAD4M,qBAAxN,kCAEgE,sBAAYA,WAAW,KAAvB,WAFhE,8BAGA,QAAC,KAAD,UAAUC,EAAV,CAAgBF,QAAQ,WAK5BF,EAAWK,gBAAiB","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/onclick/index.ts","webpack://@autoviews/website/./src/examples/onclick/app.tsx","webpack://@autoviews/website/./src/examples/onclick/repo.tsx","webpack://@autoviews/website/./src/examples/onclick/schema.json","webpack://@autoviews/website/./src/examples/onclick/data.ts","webpack://@autoviews/website/./docs/examples/onclick.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {colorMode} = useColorMode();\n    return (\n        <Sandpack\n            theme={colorMode}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.js': data\n};\n\nexport const dependencies: DemoDependencies = {\n    'json-pointer': '^0.6.1',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0',\n    'lodash': '^4.17.21'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema,\\n    AutoEventHandler,\\n    AutoEvent\\n} from '@autoviews/core';\\nimport {set} from 'json-pointer';\\nimport {Box} from '@mui/material';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\ntype ActiveStateClickEvent = AutoEvent & {data: {type: string; value: boolean}};\\n\\nexport default function App() {\\n    const [currentData, setData] = React.useState(data);\\n\\n    const clickHandler: AutoEventHandler<ActiveStateClickEvent> = (\\n        _,\\n        {pointer, data}\\n    ) => {\\n        if (data.type !== 'CHANGE_ACTIVE_STATE') {\\n            return;\\n        }\\n\\n        const newDocument = [...currentData];\\n        set(newDocument, pointer, data.value);\\n        setData(newDocument);\\n    };\\n\\n    return (\\n        <>\\n            <Box sx={{margin: '20px 16px'}}>\\n                Click on the status to change it:\\n            </Box>\\n            <RepositoryProvider components={repo}>\\n                <AutoView\\n                    schema={schema as CoreSchemaMetaSchema}\\n                    data={currentData}\\n                    onClick={clickHandler}\\n                />\\n            </RepositoryProvider>\\n        </>\\n    );\\n}\\n\";","export default \"import React from 'react';\\nimport {\\n    ComponentsRepo,\\n    AutoFields,\\n    AutoItems,\\n    clickEventHandler\\n} from '@autoviews/core';\\nimport {Box, List, ListItem, ListItemText, Chip, Divider} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('MyListRepo')\\n    .register('array', {\\n        name: 'MyList',\\n        component: props => (\\n            <Box\\n                component=\\\"form\\\"\\n                sx={{'& .MuiTextField-root': {m: 1, width: '25ch'}}}\\n                noValidate\\n                autoComplete=\\\"off\\\"\\n            >\\n                <List\\n                    sx={{bgcolor: 'background.paper'}}\\n                    dense\\n                >\\n                    <AutoItems {...props} />\\n                </List>\\n            </Box>\\n        )\\n    })\\n    .register('object', {\\n        name: 'MyObject',\\n        component: props => (\\n            <>\\n                <ListItem>\\n                    <AutoFields\\n                        pick={['login', 'active']}\\n                        {...props}\\n                    />\\n                </ListItem>\\n                <Divider component=\\\"li\\\" />\\n            </>\\n        )\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <ListItemText>{props.data}</ListItemText>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => (\\n            <Chip\\n                label={props.data ? 'online' : 'offline'}\\n                color={props.data ? 'success' : 'error'}\\n                onClick={clickEventHandler({\\n                    onClick: props.onClick,\\n                    pointer: props.pointer,\\n                    schemaPointer: props.schemaPointer,\\n                    data: {\\n                        type: 'CHANGE_ACTIVE_STATE',\\n                        value: !props.data\\n                    }\\n                })}\\n            />\\n        )\\n    });\\n\";","export default \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"login\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"age\\\": {\\n        \\\"type\\\": \\\"number\\\"\\n      },\\n      \\\"active\\\": {\\n        \\\"type\\\": \\\"boolean\\\"\\n      }\\n    }\\n  }\\n}\\n\";","export default \"export const data = [\\n    {\\n        login: 'johondoe',\\n        age: 21,\\n        active: true\\n    },\\n    {\\n        login: 'janedoe',\\n        age: 20,\\n        active: false\\n    }\\n];\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'onClick usage';\nexport const metadata = {\n  \"unversionedId\": \"examples/onclick\",\n  \"id\": \"examples/onclick\",\n  \"title\": \"onClick usage\",\n  \"description\": \"By this example you can learn how to work with click events inside ` component. As well as how to use clickEventHandler utility to construct desired onClick` event callback function.\",\n  \"source\": \"@site/docs/examples/onclick.md\",\n  \"sourceDirName\": \"examples\",\n  \"slug\": \"/examples/onclick\",\n  \"permalink\": \"/autoviews/docs/examples/onclick\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/onclick.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"examples\",\n  \"previous\": {\n    \"title\": \"Showcase\",\n    \"permalink\": \"/autoviews/docs/examples/showcase\"\n  },\n  \"next\": {\n    \"title\": \"Switch ComponentsRepo\",\n    \"permalink\": \"/autoviews/docs/examples/switch-repo\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/onclick';\nexport const toc = [];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"onclick-usage\"\n    }}>{`onClick usage`}</h1>\n\n\n    <p>{`By this example you can learn how to work with `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` events inside `}<inlineCode parentName=\"p\">{`<Autoview />`}</inlineCode>{` component. As well as how to use `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/events#clickeventhandler\"\n      }}>{`clickEventHandler`}</a>{` utility to construct desired `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` event callback function.`}</p>\n    <Demo {...demo} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","colorMode","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}