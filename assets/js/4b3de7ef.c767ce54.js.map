{"version":3,"file":"assets/js/4b3de7ef.c767ce54.js","mappings":"wKAkBA,MAAMA,EAAc,CAChB,kBAAmB,UAGhB,SAASC,EAAKC,GACjB,MAAM,UAACC,IAAaC,EAAAA,EAAAA,KACpB,OACI,gBAAC,KAAQ,CACLC,MAAOF,EACPG,SAAS,WACTC,YAAa,CACTC,MAAON,EAAMM,MACbC,aAAc,IACPT,KACAE,EAAMO,eAGjBC,QAAS,CACLC,eAAe,EACfC,aAAc,IACdC,kBAAmB,CACf,8EACA,8EAEDX,EAAMQ,UAIzB,C,4OC9CA,MCOaF,EAAmB,CAC5B,WCRJ,osBDSI,YETJ,ktGFUI,eDVJ,wlBCWI,aGXJ,2BHcaC,EAAiC,CAC1C,kBAAmB,SACnB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCI,WAAY,YIZHC,EAAc,CAAC,EACfC,EAAe,eACfC,EAAW,CACtB,cAAiB,wBACjB,GAAM,wBACN,MAAS,eACT,YAAe,0DACf,OAAU,sCACV,cAAiB,aACjB,KAAQ,yBACR,UAAa,wCACb,OAAS,EACT,QAAW,+FACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,aACT,UAAa,+BAEf,KAAQ,CACN,MAAS,QACT,UAAa,+CAGJC,EAAS,CAEtB,EAIaC,EAAM,CAAC,CAClBC,MAAO,gBACPC,GAAI,gBACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAW,GAG/B,IAH+B,WACjCC,KACGvB,GACJ,EACC,OAAO,QALS,WAKC,UAAKqB,EAAiBrB,EAAK,CAAEuB,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,cACH,iBAGL,iBAAK,4DACL,cACE,GAAM,iBACH,kBACL,QAAC,KAAI,UAAKC,EAAG,CAAED,QAAQ,UAE3B,CAEAF,EAAWI,gBAAiB,C","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/subschemas/if-then-else/schema.json","webpack://@autoviews/website/./src/examples/subschemas/if-then-else/index.ts","webpack://@autoviews/website/./src/examples/subschemas/if-then-else/app.tsx","webpack://@autoviews/website/./src/examples/subschemas/if-then-else/repo.tsx","webpack://@autoviews/website/./src/examples/subschemas/if-then-else/data.json","webpack://@autoviews/website/./docs/subschemas/conditions.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {colorMode} = useColorMode();\n    return (\n        <Sandpack\n            theme={colorMode}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","export default \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\\"cats\\\"],\\n  \\\"properties\\\": {\\n    \\\"cats\\\": {\\n      \\\"title\\\": \\\"Do you have cats?\\\",\\n      \\\"oneOf\\\": [\\n        {\\n          \\\"const\\\": true,\\n          \\\"title\\\": \\\"Yes\\\"\\n        },\\n        {\\n          \\\"const\\\": false,\\n          \\\"title\\\": \\\"No\\\"\\n        }\\n      ]\\n    }\\n  },\\n  \\\"if\\\": {\\n    \\\"properties\\\": {\\n      \\\"cats\\\": {\\n        \\\"const\\\": true\\n      }\\n    }\\n  },\\n  \\\"then\\\": {\\n    \\\"properties\\\": {\\n      \\\"numberOfCats\\\": {\\n        \\\"title\\\": \\\"Enter number of cats\\\",\\n        \\\"type\\\": \\\"number\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\\"cats\\\", \\\"numberOfCats\\\"]\\n  }\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport data from './data.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.json': data\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport schema from './schema.json';\\nimport data from './data.json';\\nimport {repo} from './repo';\\n\\nconst App = () => {\\n    const [value, setValue] = React.useState(data);\\n    const onChange = React.useCallback(e => {\\n        setValue({cats: e.target.value});\\n    }, []);\\n\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={value}\\n                onChange={onChange}\\n            />\\n        </RepositoryProvider>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"import React from 'react';\\nimport {\\n    ComponentsRepo,\\n    changeEventHandler,\\n    AutoFields,\\n    RepositoryComponentByType,\\n    AutoViewProps,\\n    useRepositoryContext\\n} from '@autoviews/core';\\nimport {\\n    FormControl,\\n    Select,\\n    MenuItem,\\n    InputLabel,\\n    TextField,\\n    Box\\n} from '@mui/material';\\n\\nconst customIfType = Symbol('if/then/else');\\n\\nexport const repo = new ComponentsRepo('conditions-repo', node => {\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    if ('oneOf' in node) {\\n        return 'oneOf';\\n    }\\n\\n    throw new Error('cannot resolve type');\\n});\\n\\nconst ObjectComponent: React.FC<AutoViewProps> = props => (\\n    <>\\n        <AutoFields {...props} />\\n        {props.schema.if && (\\n            <RepositoryComponentByType\\n                type={customIfType}\\n                {...props}\\n            />\\n        )}\\n    </>\\n);\\n\\nconst OneOfAsEnumComponent: React.FC<AutoViewProps> = props => (\\n    <FormControl fullWidth>\\n        <InputLabel id=\\\"select-label\\\">{props.schema.title}</InputLabel>\\n        <Select\\n            labelId=\\\"select-label\\\"\\n            id=\\\"select\\\"\\n            value={props.data}\\n            label={props.schema.title}\\n            onChange={changeEventHandler(props, e => e.target.value)}\\n        >\\n            {props.schema.oneOf!.map(item => (\\n                <MenuItem\\n                    value={item.const}\\n                    key={item.const}\\n                >\\n                    {item.title}\\n                </MenuItem>\\n            ))}\\n        </Select>\\n    </FormControl>\\n);\\n\\nconst IfThenElseComponent: React.FC<AutoViewProps> = ({\\n    schema,\\n    data,\\n    ...otherProps\\n}) => {\\n    const {validator} = useRepositoryContext();\\n\\n    const {if: ifStatement, then: thenStatement, else: elseStatement} = schema;\\n\\n    if (!ifStatement || !thenStatement) {\\n        throw new Error(\\n            'IfThenElseComponent cannot be invoked without `if` and `then` properties in schema'\\n        );\\n    }\\n\\n    if (validator.compile(ifStatement)(data)) {\\n        return (\\n            <AutoFields\\n                {...otherProps}\\n                data={data}\\n                schema={{type: 'object', ...thenStatement}}\\n                validation={false}\\n            />\\n        );\\n    }\\n\\n    if (elseStatement) {\\n        return (\\n            <AutoFields\\n                {...otherProps}\\n                data={data}\\n                schema={elseStatement}\\n                validation={false}\\n            />\\n        );\\n    }\\n\\n    return null;\\n};\\n\\nrepo.register('object', {\\n    name: 'object',\\n    component: ObjectComponent\\n})\\n    .register('number', {\\n        name: 'numberInput',\\n        component: ({schema}) => (\\n            <Box sx={{margin: '20px 0'}}>\\n                <TextField\\n                    id=\\\"cats_qty\\\"\\n                    type=\\\"number\\\"\\n                    variant=\\\"outlined\\\"\\n                    label={schema.title}\\n                />\\n            </Box>\\n        )\\n    })\\n    .register(customIfType, {\\n        name: 'if/then/else',\\n        component: IfThenElseComponent\\n    })\\n    .register('oneOf', {\\n        name: 'oneOfAsEnum',\\n        component: OneOfAsEnumComponent\\n    });\\n\";","export default \"{\\n  \\\"cats\\\": false\\n}\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'if/then/else';\nexport const metadata = {\n  \"unversionedId\": \"subschemas/conditions\",\n  \"id\": \"subschemas/conditions\",\n  \"title\": \"if/then/else\",\n  \"description\": \"This keywords allows to apply subschemas conditionally.\",\n  \"source\": \"@site/docs/subschemas/conditions.md\",\n  \"sourceDirName\": \"subschemas\",\n  \"slug\": \"/subschemas/conditions\",\n  \"permalink\": \"/autoviews/docs/subschemas/conditions\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/subschemas/conditions.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"Subschemas\",\n    \"permalink\": \"/autoviews/docs/subschemas/\"\n  },\n  \"next\": {\n    \"title\": \"oneOf\",\n    \"permalink\": \"/autoviews/docs/subschemas/combiners-oneof\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as ref from '../../src/examples/subschemas/if-then-else';\nexport const toc = [{\n  value: 'Basic example',\n  id: 'basic-example',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ifthenelse\"\n    }}>{`if/then/else`}</h1>\n\n\n    <p>{`This keywords allows to apply subschemas conditionally.`}</p>\n    <h2 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic example`}</h2>\n    <Demo {...ref} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","colorMode","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","mdxType","ref","isMDXComponent"],"sourceRoot":""}