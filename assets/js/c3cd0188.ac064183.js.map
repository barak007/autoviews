{"version":3,"file":"assets/js/c3cd0188.ac064183.js","mappings":"8LAkBMA,EAAc,CAChB,kBAAmB,UAGhB,SAASC,EAAKC,GACjB,IAAOC,GAAaC,EAAAA,EAAAA,KAAbD,UACP,OACI,gBAAC,KAAD,CACIE,MAAOF,EACPG,SAAS,WACTC,YAAa,CACTC,MAAON,EAAMM,MACbC,aAAa,OAAD,UACLT,EACAE,EAAMO,eAGjBC,QAAO,eACHC,eAAe,EACfC,aAAc,IACdC,kBAAmB,CACf,8EACA,4EAEDX,EAAMQ,UAIxB,C,kYCtCYF,EAAmB,CAC5B,WCTJ,qhCDUI,aEVJ,6HFWI,YGXJ,uxEHYI,mBIZJ,qLJaI,mBKbJ,uLLgBaC,EAAiC,CAC1C,kBAAmB,SACnB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCI,WAAY,Y,iBMdHC,EAAc,CAAC,EACfC,EAAe,OACfC,EAAW,CACtB,cAAiB,2BACjB,GAAM,2BACN,MAAS,OACT,YAAe,mEACf,OAAU,yCACV,cAAiB,aACjB,KAAQ,4BACR,UAAa,2CACb,OAAS,EACT,QAAW,kGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,YACX,SAAY,CACV,MAAS,QACT,UAAa,+CAGJC,EAAS,CAAC,EAMVC,EAAM,CAAC,CAClBC,MAAO,eACPC,GAAI,eACJC,MAAO,GACN,CACDF,MAAO,mCACPC,GAAI,kCACJC,MAAO,IAGHC,EAAc,CAClBJ,IAAAA,GAGa,SAASK,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGvB,GACF,YACD,OAAO,QALS,WAKT,UAAeqB,EAAiBrB,EAAhC,CAAuCuB,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,OADR,SAKA,0BAAY,sBAAYC,WAAW,KAAvB,QAAZ,2IAC4E,sBAAYA,WAAW,KAAvB,0BAD5E,MAEA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,4HASL,4EAA8D,sBAAYA,WAAW,KAAvB,QAA9D,gDAA8J,sBAAYA,WAAW,KAAvB,mBAA9J,cACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,6FAML,uFAAyE,sBAAYA,WAAW,KAAvB,QAAzE,qBAA8I,sBAAYA,WAAW,KAAvB,eAA9I,oCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,kIAUL,eACE,UAAa,sDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,sgBATZ,UAU+C,eAAKA,WAAW,MAChE,UAAa,uBACZ,aAAGA,WAAW,OAAd,gCAAoD,sBAAYA,WAAW,KAAvB,eAApD,6BAAwI,sBAAYA,WAAW,KAAvB,QAAxI,gCAAwN,sBAAYA,WAAW,KAAvB,aAAxN,iFACL,cACE,GAAM,gBADR,iBAGA,QAAC,KAAD,UAAUC,EAAV,CAAeF,QAAQ,WACvB,cACE,GAAM,mCADR,oCAIH,CAGDF,EAAWK,gBAAiB,C","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/subschemas/ref/index.ts","webpack://@autoviews/website/./src/examples/subschemas/ref/app.tsx","webpack://@autoviews/website/./src/examples/subschemas/ref/data.json","webpack://@autoviews/website/./src/examples/subschemas/ref/repo.tsx","webpack://@autoviews/website/./src/examples/subschemas/ref/BookSchema.json","webpack://@autoviews/website/./src/examples/subschemas/ref/UserSchema.json","webpack://@autoviews/website/./docs/subschemas/combiners-ref.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {colorMode} = useColorMode();\n    return (\n        <Sandpack\n            theme={colorMode}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport userSchema from './UserSchema.json?raw-loader';\nimport bookSchema from './BookSchema.json?raw-loader';\nimport data from './data.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/data.json': data,\n    '/repo.tsx': repo,\n    '/BookSchema.json': bookSchema,\n    '/UserSchema.json': userSchema\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema,\\n    createUISchema\\n} from '@autoviews/core';\\nimport {Box} from '@mui/material';\\n\\nimport userSchema from './UserSchema.json';\\nimport bookSchema from './BookSchema.json';\\nimport data from './data.json';\\nimport {repo} from './repo';\\n\\nconst uiSchema = createUISchema({\\n    [repo.name]: {\\n        '/properties/name': {\\n            name: 'title'\\n        }\\n    }\\n});\\n\\nconst App = () => {\\n    return (\\n        <Box>\\n            <RepositoryProvider\\n                components={repo}\\n                schemas={[userSchema, bookSchema] as CoreSchemaMetaSchema[]}\\n            >\\n                <AutoView\\n                    uiSchema={uiSchema}\\n                    schema={bookSchema as CoreSchemaMetaSchema}\\n                    data={data}\\n                    metadata={{'The Fellowship of the Ring': 'tfotr.jpg'}}\\n                />\\n            </RepositoryProvider>\\n        </Box>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"{\\n  \\\"name\\\": \\\"The Fellowship of the Ring\\\",\\n  \\\"author\\\": {\\n    \\\"firstName\\\": \\\"Obi-Wan\\\",\\n    \\\"lastName\\\": \\\"Kenobi\\\"\\n  }\\n}\\n\";","export default \"import React from 'react';\\nimport {\\n    AutoViewProps,\\n    ComponentsRepo,\\n    AutoFields,\\n    RefComponent\\n} from '@autoviews/core';\\nimport {Card, CardMedia, Box, Typography} from '@mui/material';\\n\\nconst staticPath = '/img/examples/ref/';\\nconst host = 'localhost:3000'; // TODO: make it env variable, or calculated\\n\\nconst StringTitleComponent: React.FC<AutoViewProps> = ({data}) => (\\n    <Typography variant=\\\"body1\\\">{data}</Typography>\\n);\\n\\nconst StringComponent: React.FC<AutoViewProps> = ({data}) => (\\n    <span>{data}</span>\\n);\\n\\nexport const repo = new ComponentsRepo('ref-example-repo', node => {\\n    if ('$ref' in node) {\\n        return '$ref';\\n    }\\n\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    throw new Error('cannot resolve type');\\n});\\n\\nrepo.register('string', {\\n    name: 'title',\\n    component: StringTitleComponent\\n});\\n\\nrepo.register('string', {\\n    name: 'basic',\\n    component: StringComponent\\n});\\n\\nrepo.register('object', {\\n    name: 'regularObject',\\n    component: props => (\\n        <dl style={{margin: 0}}>\\n            <Typography variant=\\\"body2\\\">\\n                <AutoFields {...props} />\\n            </Typography>\\n        </dl>\\n    )\\n});\\n\\nrepo.register('object', {\\n    name: 'root',\\n    component: props => (\\n        <Card sx={{display: 'flex'}}>\\n            <Box sx={{padding: '20px'}}>\\n                <CardMedia\\n                    component=\\\"img\\\"\\n                    height=\\\"140\\\"\\n                    image={\\n                        'http://' +\\n                        host +\\n                        staticPath +\\n                        props.metadata[props.data.name]\\n                    }\\n                    alt={props.data}\\n                />\\n            </Box>\\n            <Box\\n                sx={{display: 'flex', flexDirection: 'column', padding: '10px'}}\\n            >\\n                <AutoFields {...props} />\\n            </Box>\\n        </Card>\\n    ),\\n    predicate: node => node.$id && node.$id === 'BookSchemaId'\\n});\\n\\nrepo.register('$ref', {\\n    name: 'oneOfAsEnum',\\n    component: RefComponent\\n});\\n\\nrepo.addWrapper(\\n    (item, props) => (\\n        <>\\n            <dt>{props.field + ': '}</dt>\\n            <dd>{item}</dd>\\n        </>\\n    ),\\n    {include: ['basic']}\\n);\\n\";","export default \"{\\n  \\\"$id\\\": \\\"BookSchemaId\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"author\\\": {\\n      \\\"$ref\\\": \\\"UserSchemaId\\\"\\n    }\\n  }\\n}\\n\";","export default \"{\\n  \\\"$id\\\": \\\"UserSchemaId\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"firstName\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"lastName\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = '$ref';\nexport const metadata = {\n  \"unversionedId\": \"subschemas/combiners-ref\",\n  \"id\": \"subschemas/combiners-ref\",\n  \"title\": \"$ref\",\n  \"description\": \"With $ref keyword schema can reference another schema or itself.\",\n  \"source\": \"@site/docs/subschemas/combiners-ref.md\",\n  \"sourceDirName\": \"subschemas\",\n  \"slug\": \"/subschemas/combiners-ref\",\n  \"permalink\": \"/autoviews/docs/subschemas/combiners-ref\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/subschemas/combiners-ref.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"oneOf\",\n    \"permalink\": \"/autoviews/docs/subschemas/combiners-oneof\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as ref from '../../src/examples/subschemas/ref';\nexport const toc = [{\n  value: 'Full example',\n  id: 'full-example',\n  level: 2\n}, {\n  value: 'example with jsonSchemaResolver?',\n  id: 'example-with-jsonschemaresolver',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ref\"\n    }}>{`$ref`}</h1>\n\n\n    <p>{`With `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{` keyword schema can reference another schema or itself.\nTo make this work, all referred schemas must be in context by passing them to `}<inlineCode parentName=\"p\">{`<RepositoryProvider />`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<RepositoryProvider\n  components={repo}\n  schemas={[jsonSchema1, jsonSchema2]}\n>\n  // ...\n</RepositoryProvider>\n`}</code></pre>\n    <p>{`Next, repository should have component, which resolves `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{`. Ready-to-go component is available within `}<inlineCode parentName=\"p\">{`@autoviews/core`}</inlineCode>{` package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {RefComponent} from '@autoviews/core';\n\nrepo.register('$ref', RefComponent);\n`}</code></pre>\n    <p>{`To make AutoViews automatically render this component when facing `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{` keyword, repo's `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` should return keyword as type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`new ComponentsRepo('example-repo', node => {\n  if ('$ref' in node) {\n    return '$ref';\n  }\n\n  return node.type;\n});\n`}</code></pre>\n    <div {...{\n      \"className\": \"admonition admonition-note alert alert--secondary\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"\n              }}></path></svg></span>{`note`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Order of resolving types in `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` does matter. By placing `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{` condition before returning `}<inlineCode parentName=\"p\">{`node.type`}</inlineCode>{` all references will be resolved at the beginning of processing each node.`}</p></div></div>\n    <h2 {...{\n      \"id\": \"full-example\"\n    }}>{`Full example`}</h2>\n    <Demo {...ref} mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"example-with-jsonschemaresolver\"\n    }}>{`example with jsonSchemaResolver?`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","colorMode","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","mdxType","parentName","ref","isMDXComponent"],"sourceRoot":""}