{"version":3,"file":"assets/js/df235e99.8f4611cc.js","mappings":"0KAkBA,MAAMA,EAAc,CAChB,kBAAmB,UAGhB,SAASC,EAAKC,GACjB,MAAM,UAACC,IAAaC,EAAAA,EAAAA,KACpB,OACI,gBAAC,KAAQ,CACLC,MAAOF,EACPG,SAAS,WACTC,YAAa,CACTC,MAAON,EAAMM,MACbC,aAAc,IACPT,KACAE,EAAMO,eAGjBC,QAAS,CACLC,eAAe,EACfC,aAAc,IACdC,kBAAmB,CACf,8EACA,8EAEDX,EAAMQ,UAIzB,C,4OC9CA,MCOaF,EAAmB,CAC5B,WCRJ,ifDSI,YETJ,qhDFUI,eDVJ,oQCWI,WGXJ,oMHcaC,EAAiC,CAC1C,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,UACnB,OAAU,YAGDC,EAAuB,CAChCI,WAAY,YIZHC,EAAc,CAAC,EACfC,EAAe,cACfC,EAAW,CACtB,cAAiB,iBACjB,GAAM,iBACN,MAAS,cACT,YAAe,mDACf,OAAU,+BACV,cAAiB,WACjB,KAAQ,kBACR,UAAa,iCACb,OAAS,EACT,QAAW,wFACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,WACX,SAAY,CACV,MAAS,WACT,UAAa,4BAEf,KAAQ,CACN,MAAS,WACT,UAAa,sCAGJC,EAAS,CAEtB,EAIaC,EAAM,GAEbC,EAAc,CAClBD,OAGa,SAASE,EAAW,GAG/B,IAH+B,WACjCC,KACGpB,GACJ,EACC,OAAO,QALS,WAKC,UAAKkB,EAAiBlB,EAAK,CAAEoB,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,eACH,gBAGL,iBAAK,uCAAqC,sBAAYC,WAAW,KAAM,gBAA6B,gBACpG,iBAAK,yDAAuD,sBAAYA,WAAW,KAAM,YAAyB,4CAA0C,sBAAYA,WAAW,KAAM,cAA2B,iBACpN,iBAAK,mEAAiE,aAAGA,WAAW,IAChF,KAAQ,kCACL,eAAmB,eAC1B,QAAC,KAAI,UAAKC,EAAI,CAAEF,QAAQ,UAE5B,CAEAF,EAAWK,gBAAiB,C","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/basic/schema.json","webpack://@autoviews/website/./src/examples/basic/index.ts","webpack://@autoviews/website/./src/examples/basic/app.tsx","webpack://@autoviews/website/./src/examples/basic/repo.tsx","webpack://@autoviews/website/./src/examples/basic/data.ts","webpack://@autoviews/website/./docs/examples/basic.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {colorMode} = useColorMode();\n    return (\n        <Sandpack\n            theme={colorMode}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","export default \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"login\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"age\\\": {\\n        \\\"type\\\": \\\"number\\\"\\n      },\\n      \\\"active\\\": {\\n        \\\"type\\\": \\\"boolean\\\"\\n      }\\n    }\\n  }\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.js': data\n};\n\nexport const dependencies: DemoDependencies = {\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0',\n    'lodash': '^4.17.21'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\nexport default function App() {\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={data}\\n            />\\n        </RepositoryProvider>\\n    );\\n}\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, AutoFields, AutoItems} from '@autoviews/core';\\nimport {Box, List, ListItem, ListItemText, Chip, Divider} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('MyListRepo')\\n    .register('array', {\\n        name: 'MyList',\\n        component: props => (\\n            <Box\\n                component=\\\"form\\\"\\n                sx={{'& .MuiTextField-root': {m: 1, width: '25ch'}}}\\n                noValidate\\n                autoComplete=\\\"off\\\"\\n            >\\n                <List\\n                    sx={{bgcolor: 'background.paper'}}\\n                    dense\\n                >\\n                    <AutoItems {...props} />\\n                </List>\\n            </Box>\\n        )\\n    })\\n    .register('object', {\\n        name: 'MyObject',\\n        component: props => (\\n            <>\\n                <ListItem>\\n                    <AutoFields\\n                        pick={['login', 'active']}\\n                        {...props}\\n                    />\\n                </ListItem>\\n                <Divider component=\\\"li\\\" />\\n            </>\\n        )\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <ListItemText>{props.data}</ListItemText>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => (\\n            <Chip\\n                label={props.data ? 'online' : 'offline'}\\n                color={props.data ? 'success' : 'error'}\\n            />\\n        )\\n    });\\n\";","export default \"export const data = [\\n    {\\n        login: 'johondoe',\\n        age: 21,\\n        active: true\\n    },\\n    {\\n        login: 'janedoe',\\n        age: 20,\\n        active: false\\n    }\\n];\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Basic usage';\nexport const metadata = {\n  \"unversionedId\": \"examples/basic\",\n  \"id\": \"examples/basic\",\n  \"title\": \"Basic usage\",\n  \"description\": \"This is the basic example of using `` component.\",\n  \"source\": \"@site/docs/examples/basic.md\",\n  \"sourceDirName\": \"examples\",\n  \"slug\": \"/examples/basic\",\n  \"permalink\": \"/autoviews/docs/examples/basic\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/basic.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"examples\",\n  \"previous\": {\n    \"title\": \"examples\",\n    \"permalink\": \"/autoviews/docs/examples\"\n  },\n  \"next\": {\n    \"title\": \"Showcase\",\n    \"permalink\": \"/autoviews/docs/examples/showcase\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/basic';\nexport const toc = [];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h1>\n\n\n    <p>{`This is the basic example of using `}<inlineCode parentName=\"p\">{`<Autoview />`}</inlineCode>{` component.`}</p>\n    <p>{`Most of the work in this example is happening in the `}<inlineCode parentName=\"p\">{`repo.tsx`}</inlineCode>{` file, where you bind components to the `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{` data types.`}</p>\n    <p>{`Further examples will extend this one or will use amazing repo `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/components-repo\"\n      }}>{`composition`}</a>{` features.`}</p>\n    <Demo {...demo} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","colorMode","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}