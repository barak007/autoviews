{"version":3,"file":"assets/js/28e06290.361fb637.js","mappings":"+LAkBMA,EAAc,CAChB,kBAAmB,UAGhB,SAASC,EAAKC,GACjB,IAAOC,GAAeC,EAAAA,EAAAA,MAAfD,YACP,OACI,gBAAC,KAAD,CACIE,MAAOF,EAAc,OAAS,QAC9BG,SAAS,WACTC,YAAa,CACTC,MAAON,EAAMM,MACbC,aAAa,OAAD,UACLT,EACAE,EAAMO,eAGjBC,QAAO,eACHC,eAAe,EACfC,aAAc,IACdC,kBAAmB,CACf,8EACA,4EAEDX,EAAMQ,a,gYCjCZF,EAAmB,CAC5B,WCVJ,w9CDWI,gBEXJ,m9FFYI,iBGZJ,unDHaI,iBIbJ,2yCJcI,eKdJ,oQLeI,WMfJ,oMNkBaC,EAAiC,CAC1C,kBAAmB,SACnB,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,WAGVC,EAAuB,CAChCI,WAAY,Y,iBOrBHC,EAAc,GACdC,EAAe,wBACfC,EAAW,CACtB,cAAiB,uBACjB,GAAM,uBACN,MAAS,wBACT,YAAe,8FACf,OAAU,qCACV,cAAiB,WACjB,KAAQ,wBACR,UAAa,uCACb,QAAW,uGACX,KAAQ,GACR,QAAW,UACX,YAAe,GACf,QAAW,WACX,SAAY,CACV,MAAS,gBACT,UAAa,qCAGJC,EAAS,GAQTC,EAAM,GAEbC,EAAc,CAClBD,IAAAA,GAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGpB,GACF,YACD,OAAO,QALS,WAKT,UAAekB,EAAiBlB,EAAhC,CAAuCoB,WAAYA,EAAYC,QAAQ,eAC5E,cACE,GAAM,yBADR,0BAKA,iDAAmC,aAAGC,WAAW,IAC7C,KAAQ,aADuB,WAAnC,kBAEsC,sBAAYA,WAAW,KAAvB,QAFtC,2CAGA,6BAAe,sBAAYA,WAAW,KAAvB,YAAf,sCAAyG,sBAAYA,WAAW,KAAvB,iBAAzG,yCACA,wHAA0G,sBAAYA,WAAW,KAAvB,kBAA1G,4CACA,kBAAG,sBAAYA,WAAW,KAAvB,YAAH,sCAA6F,sBAAYA,WAAW,KAAvB,aAA7F,gCAAkL,sBAAYA,WAAW,KAAvB,QAAlL,sCAAwQ,sBAAYA,WAAW,KAAvB,gBAAxQ,YAA4U,sBAAYA,WAAW,KAAvB,WAA5U,MACA,QAAC,KAAD,UAAUC,EAAV,CAAgBF,QAAQ,WAK5BF,EAAWK,gBAAiB","sources":["webpack://@autoviews/website/./src/components/Demo/Demo.tsx","webpack://@autoviews/website/./src/examples/switch-repo/index.ts","webpack://@autoviews/website/./src/examples/switch-repo/app.tsx","webpack://@autoviews/website/./src/examples/switch-repo/ListItem.tsx","webpack://@autoviews/website/./src/examples/switch-repo/list-repo.tsx","webpack://@autoviews/website/./src/examples/switch-repo/item-repo.tsx","webpack://@autoviews/website/./src/examples/switch-repo/schema.json","webpack://@autoviews/website/./src/examples/switch-repo/data.ts","webpack://@autoviews/website/./docs/examples/switch-repo.md"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': 'latest'\n};\n\nexport function Demo(props: DemoProps) {\n    const {isDarkTheme} = useColorMode();\n    return (\n        <Sandpack\n            theme={isDarkTheme ? 'dark' : 'light'}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport listRepo from './list-repo.tsx?raw-loader';\nimport itemRepo from './item-repo.tsx?raw-loader';\nimport ListItem from './ListItem.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/ListItem.tsx': ListItem,\n    '/list-repo.tsx': listRepo,\n    '/item-repo.tsx': itemRepo,\n    '/schema.json': schema,\n    '/data.js': data\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema,\\n    AutoEventHandler,\\n    AutoEvent\\n} from '@autoviews/core';\\nimport {set} from 'json-pointer';\\nimport {applyPatch} from 'fast-json-patch';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './list-repo';\\n\\nexport type MyClickEvent = AutoEvent & {data: {type: string; value?: any}};\\n\\nexport default function App() {\\n    const [currentData, setData] = React.useState(data);\\n\\n    const clickHandler = React.useCallback<AutoEventHandler<MyClickEvent>>(\\n        (_, {pointer, data}) => {\\n            switch (data.type) {\\n                case 'SAVE_ITEM': {\\n                    setData([\\n                        ...applyPatch(currentData, data.value).newDocument\\n                    ]);\\n                    break;\\n                }\\n\\n                case 'CHANGE_ACTIVE_STATE': {\\n                    const newDocument = [...currentData];\\n                    set(newDocument, pointer, data.value);\\n                    setData(newDocument);\\n                    break;\\n                }\\n            }\\n        },\\n        [currentData, setData]\\n    );\\n\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={currentData}\\n                onClick={clickHandler}\\n            />\\n        </RepositoryProvider>\\n    );\\n}\\n\";","export default \"import React, {useState} from 'react';\\nimport {Operation} from 'fast-json-patch';\\nimport {\\n    AutoViewProps,\\n    AutoFields,\\n    RepositoryProvider,\\n    AutoEventHandler,\\n    AutoChangeEvent,\\n    clickEventHandler\\n} from '@autoviews/core';\\nimport {ListItem as MUIListItem, Divider, Button, Stack} from '@mui/material';\\n\\nimport {repo} from './item-repo';\\n\\nexport const ListItem: React.ComponentType<AutoViewProps> = props => {\\n    const [view, setView] = useState<'item' | 'listItem'>('listItem');\\n    const [patches, setPatches] = useState<Operation[]>([]);\\n\\n    const changeHandler = React.useCallback<AutoEventHandler<AutoChangeEvent>>(\\n        (_, {patch}) => {\\n            setPatches(patches.concat(patch));\\n        },\\n        [patches, setPatches]\\n    );\\n\\n    const saveHandler = clickEventHandler({\\n        ...props,\\n        data: {type: 'SAVE_ITEM', value: patches}\\n    });\\n\\n    switch (view) {\\n        case 'listItem': {\\n            return (\\n                <>\\n                    <MUIListItem>\\n                        <AutoFields\\n                            {...props}\\n                            pick={['login', 'active']}\\n                        />\\n                        <Button\\n                            variant=\\\"text\\\"\\n                            onClick={() => {\\n                                setView('item');\\n                            }}\\n                            sx={{margin: '0 10px'}}\\n                        >\\n                            Edit\\n                        </Button>\\n                    </MUIListItem>\\n                    <Divider component=\\\"li\\\" />\\n                </>\\n            );\\n        }\\n        case 'item': {\\n            return (\\n                <RepositoryProvider components={repo}>\\n                    <AutoFields\\n                        {...props}\\n                        onChange={changeHandler}\\n                    />\\n                    <Stack\\n                        direction=\\\"row\\\"\\n                        spacing={2}\\n                        sx={{margin: '20px 0'}}\\n                    >\\n                        <Button\\n                            variant=\\\"contained\\\"\\n                            color=\\\"success\\\"\\n                            onClick={e => {\\n                                setView('listItem');\\n                                saveHandler(e);\\n                            }}\\n                        >\\n                            Save\\n                        </Button>\\n                        <Button\\n                            color=\\\"secondary\\\"\\n                            onClick={() => {\\n                                setView('listItem');\\n                                setPatches([]);\\n                            }}\\n                        >\\n                            Discard\\n                        </Button>\\n                    </Stack>\\n                    <Divider />\\n                </RepositoryProvider>\\n            );\\n        }\\n    }\\n};\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, AutoItems, clickEventHandler} from '@autoviews/core';\\nimport {Box, List, ListItemText, Chip} from '@mui/material';\\n\\nimport {ListItem} from './ListItem';\\n\\nexport const repo = new ComponentsRepo('MyListRepo')\\n    .register('array', {\\n        name: 'MyList',\\n        component: props => (\\n            <Box\\n                component=\\\"form\\\"\\n                sx={{'& .MuiTextField-root': {m: 1, width: '25ch'}}}\\n                noValidate\\n                autoComplete=\\\"off\\\"\\n            >\\n                <List\\n                    sx={{bgcolor: 'background.paper'}}\\n                    dense\\n                >\\n                    <AutoItems {...props} />\\n                </List>\\n            </Box>\\n        )\\n    })\\n    .register('object', {\\n        name: 'MyObject',\\n        component: ListItem\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <ListItemText>{props.data}</ListItemText>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => (\\n            <Chip\\n                label={props.data ? 'online' : 'offline'}\\n                color={props.data ? 'success' : 'error'}\\n                onClick={clickEventHandler({\\n                    onClick: props.onClick,\\n                    pointer: props.pointer,\\n                    schemaPointer: props.schemaPointer,\\n                    data: {\\n                        type: 'CHANGE_ACTIVE_STATE',\\n                        value: !props.data\\n                    }\\n                })}\\n            />\\n        )\\n    });\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, AutoFields, changeEventHandler} from '@autoviews/core';\\nimport {TextField, Switch, FormControlLabel, Box} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('MyItemRepo')\\n    .register('object', {\\n        name: 'MyObjectForm',\\n        component: AutoFields\\n    })\\n    .register('string', {\\n        name: 'MyStringInputComponent',\\n        component: props => (\\n            <TextField\\n                defaultValue={props.data}\\n                onChange={changeEventHandler(props, e => e.target.value)}\\n            />\\n        )\\n    })\\n    .register('number', {\\n        name: 'MyNumberInputComponent',\\n        component: props => (\\n            <TextField\\n                type=\\\"number\\\"\\n                defaultValue={props.data}\\n                onChange={changeEventHandler(props, e => e.target.value)}\\n            />\\n        )\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanInputComponent',\\n        component: props => (\\n            <Box>\\n                <FormControlLabel\\n                    control={<Switch defaultChecked={props.data} />}\\n                    label=\\\"Status\\\"\\n                    onChange={changeEventHandler(props, () => !props.data)}\\n                />\\n            </Box>\\n        )\\n    });\\n\";","export default \"{\\n  \\\"type\\\": \\\"array\\\",\\n  \\\"items\\\": {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"login\\\": {\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"age\\\": {\\n        \\\"type\\\": \\\"number\\\"\\n      },\\n      \\\"active\\\": {\\n        \\\"type\\\": \\\"boolean\\\"\\n      }\\n    }\\n  }\\n}\\n\";","export default \"export const data = [\\n    {\\n        login: 'johondoe',\\n        age: 21,\\n        active: true\\n    },\\n    {\\n        login: 'janedoe',\\n        age: 20,\\n        active: false\\n    }\\n];\\n\";","\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Switch ComponentsRepo';\nexport const metadata = {\n  \"unversionedId\": \"examples/switch-repo\",\n  \"id\": \"examples/switch-repo\",\n  \"title\": \"Switch ComponentsRepo\",\n  \"description\": \"Here we extended our simple onClick example with Edit button which opens item view as form.\",\n  \"source\": \"@site/docs/examples/switch-repo.md\",\n  \"sourceDirName\": \"examples\",\n  \"slug\": \"/examples/switch-repo\",\n  \"permalink\": \"/autoviews/docs/examples/switch-repo\",\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/packages/website/docs/examples/switch-repo.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"examples\",\n  \"previous\": {\n    \"title\": \"onClick usage\",\n    \"permalink\": \"/autoviews/docs/examples/onclick\"\n  }\n};\nexport const assets = {\n\n};\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/switch-repo';\nexport const toc = [];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"switch-componentsrepo\"\n    }}>{`Switch ComponentsRepo`}</h1>\n\n\n    <p>{`Here we extended our simple `}<a parentName=\"p\" {...{\n        \"href\": \"./onclick\"\n      }}>{`onClick`}</a>{` example with `}<inlineCode parentName=\"p\">{`Edit`}</inlineCode>{` button which opens item view as form.`}</p>\n    <p>{`We made `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode>{` component, which we are using in `}<inlineCode parentName=\"p\">{`list-repo.tsx`}</inlineCode>{` for each object in our users array.`}</p>\n    <p>{`It has internal state, that reflects how to display item: as list item or as form by providing new `}<inlineCode parentName=\"p\">{`ComponentsRepo`}</inlineCode>{` in case we want to render a form view.`}</p>\n    <p><inlineCode parentName=\"p\">{`ListItem`}</inlineCode>{` in it's state collects a list of `}<inlineCode parentName=\"p\">{`JSONPatch`}</inlineCode>{` objects and by clicking on `}<inlineCode parentName=\"p\">{`Save`}</inlineCode>{` button we apply those patches in `}<inlineCode parentName=\"p\">{`clickHandler`}</inlineCode>{` at the `}<inlineCode parentName=\"p\">{`App.tsx`}</inlineCode>{`.`}</p>\n    <Demo {...demo} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["initialDeps","Demo","props","isDarkTheme","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","activePath","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}