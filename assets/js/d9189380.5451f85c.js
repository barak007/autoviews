"use strict";(self.webpackChunk_autoviews_docs=self.webpackChunk_autoviews_docs||[]).push([[954],{7356:function(n,e,t){t.d(e,{B:function(){return i}});var a=t(2784),o=t(6092),r=t(9546),s={"@autoviews/core":"latest"};function i(n){var e=(0,r.If)().isDarkTheme;return a.createElement(o.xR,{theme:e?"dark":"light",template:"react-ts",customSetup:{files:n.files,dependencies:Object.assign({},s,n.dependencies)},options:Object.assign({showNavigator:!0,editorHeight:500,externalResources:["https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap","https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"]},n.options)})}},5413:function(n,e,t){t.d(e,{ps:function(){return i},jN:function(){return m}});var a={"/App.tsx":"import React, {useCallback, useMemo, useState} from 'react';\nimport {applyPatch} from 'fast-json-patch';\nimport {\n    AutoView,\n    ComponentsRepo,\n    RepositoryProvider,\n    UISchema\n} from '@autoviews/core';\nimport {\n    Box,\n    Button,\n    ButtonGroup,\n    Card,\n    CardContent,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Divider,\n    CardHeader\n} from '@mui/material';\n\nimport {availableUISchemas} from './uiSchemas';\nimport './styles.css';\nimport {dataStore, SchemaNames, schemas} from './Data';\nimport {MUIFormRepo, MUITableRepo} from './MUIRepos';\nimport {BootstrapFormRepo, BootstrapTableRepo} from './BootstrapRepos';\n\nexport default function App() {\n    // data\n    const [data, setData] = useState<any[]>(dataStore.user);\n\n    // JSON Schema\n    const [schemaName, setSchemaName] = useState('user');\n    const schema = useMemo(() => schemas[schemaName], [schemaName]);\n\n    // UI Schema\n    const [tableUISchemaName, setTableUISchemaName] = useState('Default');\n    const [formUISchemaName, setFormUISchemaName] = useState('Default');\n    const [[formUISchema, tableUISchema], setUISchemas] = useState<\n        [UISchema, UISchema]\n    >([\n        availableUISchemas['user'].form[formUISchemaName],\n        availableUISchemas['user'].table[tableUISchemaName]\n    ]);\n\n    // Item to be edited in the form\n    const [item, setItem] = useState<any>({});\n\n    const onSchemaChange = useCallback((e: SelectChangeEvent<string>) => {\n        const name = e.target.value as SchemaNames;\n        setSchemaName(name);\n        setData(dataStore[name]);\n        setTableUISchemaName('Default');\n        setFormUISchemaName('Default');\n        setUISchemas([\n            availableUISchemas[name].form['Default'],\n            availableUISchemas[name].table['Default']\n        ]);\n    }, []);\n\n    const onTableUISchemaChange = useCallback(\n        (e: SelectChangeEvent<string>) => {\n            const name = e.target.value as string;\n            setTableUISchemaName(name);\n            setUISchemas([\n                formUISchema,\n                availableUISchemas[schemaName].table[name]\n            ]);\n        },\n        [formUISchema, schemaName]\n    );\n\n    const onFormUISchemaChange = useCallback(\n        (e: SelectChangeEvent<string>) => {\n            const name = e.target.value as string;\n            setFormUISchemaName(name);\n            setUISchemas([\n                availableUISchemas[schemaName].form[name],\n                tableUISchema\n            ]);\n        },\n        [tableUISchema, schemaName]\n    );\n\n    const onFormChange = useCallback(\n        (_: any, {patch}) => {\n            setItem({...applyPatch(item, patch).newDocument});\n        },\n        [setItem, item]\n    );\n\n    const [tableRepo, setTableRepo] = useState<ComponentsRepo>(MUITableRepo);\n    const [formRepo, setFormRepo] = useState<ComponentsRepo>(MUIFormRepo);\n\n    const onSetRepo = useCallback(\n        (name: 'mui' | 'bootstrap') => {\n            switch (name) {\n                case 'mui':\n                    setTableRepo(MUITableRepo);\n                    setFormRepo(MUIFormRepo);\n                    break;\n                case 'bootstrap':\n                    setTableRepo(BootstrapTableRepo);\n                    setFormRepo(BootstrapFormRepo);\n                    break;\n            }\n        },\n        [setTableRepo, setFormRepo]\n    );\n\n    const onAddItem = useCallback(\n        (_, e) => {\n            switch (e.data.action) {\n                case 'SAVE':\n                    setData([...data, item]);\n                    setItem({});\n                    break;\n            }\n        },\n        [item, data]\n    );\n    interface DropdownProps {\n        id: string;\n        title: string;\n        value: string;\n        values: string[];\n        onChange: (e: SelectChangeEvent<string>) => void;\n    }\n    const Dropdown = ({id, title, value, values, onChange}: DropdownProps) => {\n        return (\n            <FormControl sx={{width: '140px', margin: '0 10px'}}>\n                <InputLabel id={`${id}-select-label`}>{title}</InputLabel>\n                <Select\n                    labelId={`${id}-select-label`}\n                    id={`${id}-select`}\n                    value={value}\n                    label={title}\n                    onChange={onChange}\n                >\n                    {values.map(key => (\n                        <MenuItem\n                            value={key}\n                            key={key}\n                        >\n                            {key}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <Box style={{margin: '0 20px'}}>\n                <Card sx={{margin: '20px 0'}}>\n                    <CardHeader\n                        title=\"Controls\"\n                        subheader=\"Change UI Library, Schema or UI Schema\"\n                    />\n                    <Divider />\n                    <CardContent>\n                        <ButtonGroup aria-label=\"outlined button group\">\n                            <Button\n                                onClick={() => onSetRepo('mui')}\n                                variant={\n                                    tableRepo === MUITableRepo\n                                        ? 'contained'\n                                        : 'outlined'\n                                }\n                            >\n                                Mateial UI\n                            </Button>\n                            <Button\n                                onClick={() => onSetRepo('bootstrap')}\n                                variant={\n                                    tableRepo === BootstrapTableRepo\n                                        ? 'contained'\n                                        : 'outlined'\n                                }\n                            >\n                                Bootstrap\n                            </Button>\n                            <Dropdown\n                                id={'schema'}\n                                title={'Schema'}\n                                value={schemaName}\n                                values={Object.keys(schemas)}\n                                onChange={onSchemaChange}\n                            />\n                        </ButtonGroup>\n                    </CardContent>\n                </Card>\n\n                <Card variant=\"outlined\">\n                    <CardHeader\n                        title=\"Table\"\n                        subheader=\"First instance of AutoView\"\n                        action={\n                            <Dropdown\n                                id={'table-ui-schema'}\n                                title={'Table UI Schema'}\n                                value={tableUISchemaName}\n                                values={Object.keys(\n                                    availableUISchemas[schemaName].table\n                                )}\n                                onChange={onTableUISchemaChange}\n                            />\n                        }\n                    />\n                    <Divider />\n                    <CardContent>\n                        <RepositoryProvider components={tableRepo}>\n                            <AutoView\n                                schema={schema}\n                                data={data}\n                                uiSchema={tableUISchema}\n                            />\n                        </RepositoryProvider>\n                    </CardContent>\n                </Card>\n                <Card\n                    variant=\"outlined\"\n                    sx={{margin: '20px 0'}}\n                >\n                    <CardHeader\n                        title=\"Form\"\n                        subheader=\"Second instance of AutoView\"\n                        action={\n                            <Dropdown\n                                id={'form-ui-schema'}\n                                title={'Form UI Schema'}\n                                value={formUISchemaName}\n                                values={Object.keys(\n                                    availableUISchemas[schemaName].form\n                                )}\n                                onChange={onFormUISchemaChange}\n                            />\n                        }\n                    />\n                    <Divider />\n                    <CardContent>\n                        <RepositoryProvider components={formRepo}>\n                            <AutoView\n                                data={item}\n                                uiSchema={formUISchema}\n                                schema={schema.items!}\n                                onChange={onFormChange}\n                                onClick={onAddItem}\n                            />\n                        </RepositoryProvider>\n                    </CardContent>\n                </Card>\n            </Box>\n        </div>\n    );\n}\n","/basicRepo.tsx":"import {ComponentsRepo} from '@autoviews/core';\nimport React from 'react';\nimport {CoreSchemaMetaSchema} from '@autoviews/core';\n\nimport {\n    EMAIL_SUBTYPE,\n    IMAGE_SUBTYPE,\n    LINK_SUBTYPE,\n    LONG_TEXT_SUBTYPE\n} from './schemas';\n\nexport const oneOfEnumLike = 'oneOfEnumLike';\nexport function detectEnums(node: CoreSchemaMetaSchema): string {\n    if (node.type) {\n        return node.type as string;\n    }\n\n    if (\n        node.oneOf &&\n        node.oneOf.find(alternative => !alternative.const) === undefined\n    ) {\n        return oneOfEnumLike;\n    }\n\n    throw new Error(\n        'cannot resolve type for JSONSchema node ' + JSON.stringify(node)\n    );\n}\n\nexport const basicRepo = new ComponentsRepo('displayRepo', detectEnums)\n    .register('string', {\n        name: 'textComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .register('string', {\n        name: 'longTextComponent',\n        component: props => (\n            <span>\n                {props.data.substring(0, 60)}\n                ...\n            </span>\n        ),\n        predicate: node => node.format === LONG_TEXT_SUBTYPE\n    })\n    .register('string', {\n        name: 'imageComponent',\n        component: props => (\n            <span>\n                <img\n                    src={props.data}\n                    style={{width: '60px', height: '60px'}}\n                />\n            </span>\n        ),\n        predicate: node => node.format === IMAGE_SUBTYPE\n    })\n    .register('string', {\n        name: 'emailComponent',\n        component: props => (\n            <span>\n                <a href={`mailto:${props.data}`}>{props.data}</a>\n            </span>\n        ),\n        predicate: node => node.format === EMAIL_SUBTYPE\n    })\n    .register('string', {\n        name: 'linkComponent',\n        component: props => (\n            <span>\n                <a href={props.data}>{props.data}</a>\n            </span>\n        ),\n        predicate: node => node.format === LINK_SUBTYPE\n    })\n    .register('number', {\n        name: 'numberComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .register('boolean', {\n        name: 'booleanComponent',\n        component: props => <span>{props.data ? 'Yes' : 'No'}</span>\n    })\n    .register('array', {\n        name: 'arrayOfStringComponent',\n        component: props => <span>{props.data.join(', ')}</span>,\n        predicate: node => node.items.type === 'string'\n    })\n    .register('oneOfEnumLike', {\n        name: 'enumComponent',\n        component: props => <span>{props.data}</span>\n    });\n","/BootstrapForm.tsx":"import React from 'react';\nimport {\n    AutoFields,\n    AutoViewProps,\n    changeEventHandler,\n    clickEventHandler,\n    createUISchema,\n    createUISchemaAccessor,\n    ACCESSOR_TYPES,\n    UNGROUPED,\n    getPropertiesByGroupName,\n    extractItemUISchema\n} from '@autoviews/core';\nimport {Button, Form} from 'react-bootstrap';\n\nexport const BootstrapForm = (props: AutoViewProps) => {\n    const itemUISchema = extractItemUISchema(\n        props.uiSchema ?? createUISchema()\n    );\n    const UISchemaAcessor = createUISchemaAccessor(\n        itemUISchema,\n        '',\n        ACCESSOR_TYPES.object\n    );\n\n    const allProperties = Object.keys(props.schema.properties!);\n    const groups = UISchemaAcessor.getGroups() ?? [];\n    const groupNames = groups.map(({name}) => name).concat([UNGROUPED]);\n    return (\n        <Form>\n            {groupNames.map(name => {\n                const fields = getPropertiesByGroupName(\n                    groups,\n                    name,\n                    allProperties\n                ).filter(field => allProperties.includes(field));\n\n                if (!fields.length) {\n                    return null;\n                }\n\n                return (\n                    <Form.Group\n                        className=\"shadow p-3 mb-2 bg-light rounded\"\n                        key={name}\n                    >\n                        <AutoFields\n                            {...props}\n                            uiSchema={itemUISchema}\n                            pick={fields}\n                        />\n                    </Form.Group>\n                );\n            })}\n            <Button\n                variant=\"success\"\n                onClick={clickEventHandler({...props, data: {action: 'SAVE'}})}\n            >\n                Add\n            </Button>\n        </Form>\n    );\n};\n\nexport const BootstrapText = (props: AutoViewProps) => {\n    return (\n        <Form.Control\n            value={props.data || ''}\n            placeholder={props.schema.title || props.field}\n            onChange={changeEventHandler(props, e => e.target.value)}\n        />\n    );\n};\n\nexport const BootstrapNumber = (props: AutoViewProps) => {\n    return (\n        <Form.Control\n            type=\"number\"\n            value={props.data || ''}\n            placeholder={props.schema.title || props.field}\n            onChange={changeEventHandler(props, e => e.target.value)}\n        />\n    );\n};\n\nexport const BootstrapSwitch = (props: AutoViewProps) => {\n    return (\n        <Form.Check\n            checked={props.data ?? false}\n            onChange={changeEventHandler(props, e => e.target.checked)}\n            type=\"switch\"\n            label={props.schema.title}\n        />\n    );\n};\n","/BootstrapRepos.tsx":"import {AutoFields, ComponentsRepo} from '@autoviews/core';\nimport React from 'react';\n\nimport {BootstrapTable} from './BootstrapTable';\nimport {basicRepo, detectEnums} from './basicRepo';\nimport {\n    BootstrapForm,\n    BootstrapNumber,\n    BootstrapSwitch,\n    BootstrapText\n} from './BootstrapForm';\n\nexport const BootstrapTableRepo = basicRepo\n    .clone('BootstrapTableRepo')\n    .register('array', {\n        name: 'tableComponent',\n        component: BootstrapTable,\n        predicate: node => node.items.type === 'object'\n    })\n    .register('object', {\n        name: 'tableRowComponent',\n        component: props => (\n            <tr>\n                <AutoFields {...props} />\n            </tr>\n        )\n    })\n    .addWrapper(item => <td>{item}</td>, {\n        include: [\n            'textComponent',\n            'numberComponent',\n            'booleanComponent',\n            'imageComponent',\n            'emailComponent',\n            'linkComponent',\n            'arrayOfStringComponent',\n            'enumComponent'\n        ]\n    });\n\nexport const BootstrapFormRepo = new ComponentsRepo(\n    'BootstrapFormRepo',\n    detectEnums\n)\n    .register('object', {\n        name: 'formComponent',\n        component: BootstrapForm\n    })\n    .register('string', {\n        name: 'textComponent',\n        component: BootstrapText\n    })\n    .register('number', {\n        name: 'numberComponent',\n        component: BootstrapNumber\n    })\n    .register('boolean', {\n        name: 'switchComponent',\n        component: BootstrapSwitch\n    })\n    .register('array', {\n        name: 'arrayComponent',\n        component: () => <span>array</span>\n    })\n    .register('oneOfEnumLike', {\n        name: 'enumComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .addWrapper(item => <div style={{margin: '5px 0'}}>{item}</div>, {\n        include: ['textComponent', 'numberComponent', 'switchComponent']\n    });\n","/BootstrapTable.tsx":"import React from 'react';\nimport {\n    AutoViewProps,\n    AutoItems,\n    orderFields,\n    getHints,\n    extractItemUISchema,\n    createUISchema\n} from '@autoviews/core';\nimport {Table} from 'react-bootstrap';\n\nexport const BootstrapTable = (props: AutoViewProps) => {\n    const headers = orderFields(\n        Object.keys((props.schema.items as any).properties),\n        getHints(extractItemUISchema(props.uiSchema ?? createUISchema()), '')\n            .order\n    ).map(\n        field => (props.schema?.items as any).properties[field].title\n    ) as string[];\n\n    return (\n        <Table\n            striped\n            bordered\n            hover\n            responsive\n        >\n            <thead>\n                <tr>\n                    {headers.map((header, i) => (\n                        <th key={i}>{header}</th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                <AutoItems {...props} />\n            </tbody>\n        </Table>\n    );\n};\n","/Data.ts":"import {CoreSchemaMetaSchema} from '@autoviews/core';\n\nimport {carsSchema, cocktailsSchema, usersSchema} from './schemas';\n\nexport type SchemaNames = 'user' | 'cocktail' | 'car';\nexport const schemas: Record<SchemaNames, CoreSchemaMetaSchema> = {\n    user: usersSchema,\n    cocktail: cocktailsSchema,\n    car: carsSchema\n};\n\nexport const dataStore = {\n    user: [\n        {\n            firstName: 'James',\n            lastName: 'Butt',\n            companyName: 'Benton, John B Jr',\n            address: '6649 N Blue Gum St',\n            city: 'New Orleans',\n            county: 'Orleans',\n            state: 'LA',\n            zip: 70116,\n            phone1: '504-621-8927',\n            phone2: '504-845-1427',\n            email: 'jbutt@gmail.com',\n            web: 'http://www.bentonjohnbjr.com',\n            avatar: 'https://gravatar.com/avatar/41f0f3b2eed96340a3edd888afdc3630?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Josephine',\n            lastName: 'Darakjy',\n            companyName: 'Chanay, Jeffrey A Esq',\n            address: '4 B Blue Ridge Blvd',\n            city: 'Brighton',\n            county: 'Livingston',\n            state: 'MI',\n            zip: 48116,\n            phone1: '810-292-9388',\n            phone2: '810-374-9840',\n            email: 'josephine_darakjy@darakjy.org',\n            web: 'http://www.chanayjeffreyaesq.com',\n            avatar: 'https://gravatar.com/avatar/d9749d380698c2cefda8dc44d80205d6?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Art',\n            lastName: 'Venere',\n            companyName: 'Chemel, James L Cpa',\n            address: '8 W Cerritos Ave #54',\n            city: 'Bridgeport',\n            county: 'Gloucester',\n            state: 'NJ',\n            zip: 8014,\n            phone1: '856-636-8749',\n            phone2: '856-264-4130',\n            email: 'art@venere.org',\n            web: 'http://www.chemeljameslcpa.com',\n            avatar: 'https://gravatar.com/avatar/aaceb00432083e38115b8a8a91d39c9e?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Lenna',\n            lastName: 'Paprocki',\n            companyName: 'Feltz Printing Service',\n            address: '639 Main St',\n            city: 'Anchorage',\n            county: 'Anchorage',\n            state: 'AK',\n            zip: 99501,\n            phone1: '907-385-4412',\n            phone2: '907-921-2010',\n            email: 'lpaprocki@hotmail.com',\n            web: 'http://www.feltzprintingservice.com',\n            avatar: 'https://gravatar.com/avatar/3bd5b329d175d85bb46b78623153e083?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Donette',\n            lastName: 'Foller',\n            companyName: 'Printing Dimensions',\n            address: '34 Center St',\n            city: 'Hamilton',\n            county: 'Butler',\n            state: 'OH',\n            zip: 45011,\n            phone1: '513-570-1893',\n            phone2: '513-549-4561',\n            email: 'donette.foller@cox.net',\n            web: 'http://www.printingdimensions.com',\n            avatar: 'https://gravatar.com/avatar/b9fd481533bf9015aebadab4d31c1008?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Simona',\n            lastName: 'Morasca',\n            companyName: 'Chapman, Ross E Esq',\n            address: '3 Mcauley Dr',\n            city: 'Ashland',\n            county: 'Ashland',\n            state: 'OH',\n            zip: 44805,\n            phone1: '419-503-2484',\n            phone2: '419-800-6759',\n            email: 'simona@morasca.com',\n            web: 'http://www.chapmanrosseesq.com',\n            avatar: 'https://gravatar.com/avatar/1ba4b931c69aefdb40df15e79201c138?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Mitsue',\n            lastName: 'Tollner',\n            companyName: 'Morlong Associates',\n            address: '7 Eads St',\n            city: 'Chicago',\n            county: 'Cook',\n            state: 'IL',\n            zip: 60632,\n            phone1: '773-573-6914',\n            phone2: '773-924-8565',\n            email: 'mitsue_tollner@yahoo.com',\n            web: 'http://www.morlongassociates.com',\n            avatar: 'https://gravatar.com/avatar/d26ca287839f20a737541b0f1a9b5ba8?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Leota',\n            lastName: 'Dilliard',\n            companyName: 'Commercial Press',\n            address: '7 W Jackson Blvd',\n            city: 'San Jose',\n            county: 'Santa Clara',\n            state: 'CA',\n            zip: 95111,\n            phone1: '408-752-3500',\n            phone2: '408-813-1105',\n            email: 'leota@hotmail.com',\n            web: 'http://www.commercialpress.com',\n            avatar: 'https://gravatar.com/avatar/f47951129970117383e43a12e8aeede5?s=400&d=robohash&r=x'\n        },\n        {\n            firstName: 'Sage',\n            lastName: 'Wieser',\n            companyName: 'Truhlar And Truhlar Attys',\n            address: '5 Boston Ave #88',\n            city: 'Sioux Falls',\n            county: 'Minnehaha',\n            state: 'SD',\n            zip: 57105,\n            phone1: '605-414-2147',\n            phone2: '605-794-4895',\n            email: 'sage_wieser@cox.net',\n            web: 'http://www.truhlarandtruhlarattys.com',\n            avatar: 'https://gravatar.com/avatar/a6dab9166ebc693528714c35f3e7613e?s=400&d=robohash&r=x'\n        }\n    ],\n    cocktail: [\n        {\n            drink: 'Margarita',\n            tags: ['IBA', 'ContemporaryClassic'],\n            category: 'Ordinary Drink',\n            iba: 'Contemporary Classics',\n            glass: 'cocktail glass',\n            alcohol: 41,\n            instructions:\n                'Rub the rim of the glass with the lime slice to make the salt stick to it. Take care to moisten only the outer rim and sprinkle the salt on it. The salt should present to the lips of the imbiber and never mix into the cocktail. Shake the other ingredients with ice, then carefully pour into the glass.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/5noda61589575158.jpg',\n            isUnique: false,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Tequila',\n                    measure: '1 1/2 oz '\n                },\n                {\n                    ingredient: 'Triple sec',\n                    measure: '1/2 oz '\n                },\n                {\n                    ingredient: 'Lime juice',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Salt',\n                    measure: 'pinch'\n                }\n            ]\n        },\n        {\n            drink: 'Blue Margarita',\n            tags: ['Classic'],\n            category: 'Ordinary Drink',\n            glass: 'cocktail glass',\n            alcohol: 13,\n            instructions:\n                'Rub rim of cocktail glass with lime juice. Dip rim in coarse salt. Shake tequila, blue curacao, and lime juice with ice, strain into the salt-rimmed glass, and serve.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/bry4qh1582751040.jpg',\n            isUnique: false,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Tequila',\n                    measure: '1 1/2 oz '\n                },\n                {\n                    ingredient: 'Blue Curacao',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Lime juice',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Salt',\n                    measure: 'Coarse '\n                }\n            ]\n        },\n        {\n            drink: \"Tommy's Margarita\",\n            tags: ['IBA', 'NewEra'],\n            category: 'Ordinary Drink',\n            iba: 'New Era Drinks',\n            glass: 'old-fashioned glass',\n            alcohol: 37,\n            instructions: 'Shake and strain into a chilled cocktail glass.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/loezxn1504373874.jpg',\n            isUnique: true,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Tequila',\n                    measure: '4.5 cl'\n                },\n                {\n                    ingredient: 'Lime Juice',\n                    measure: '1.5 cl'\n                },\n                {\n                    ingredient: 'Agave syrup',\n                    measure: '2 spoons'\n                }\n            ]\n        },\n        {\n            drink: 'Whitecap Margarita',\n            tags: ['Original'],\n            category: 'Other/Unknown',\n            glass: 'margarita/coupette glass',\n            alcohol: 20,\n            instructions:\n                'Place all ingredients in a blender and blend until smooth. This makes one drink.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/srpxxp1441209622.jpg',\n            isUnique: true,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Ice',\n                    measure: '1 cup '\n                },\n                {\n                    ingredient: 'Tequila',\n                    measure: '2 oz '\n                },\n                {\n                    ingredient: 'Cream of coconut',\n                    measure: '1/4 cup '\n                },\n                {\n                    ingredient: 'Lime juice',\n                    measure: '3 tblsp fresh '\n                }\n            ]\n        },\n        {\n            drink: 'Strawberry Margarita',\n            tags: ['Classic', 'DinnerParty'],\n            category: 'Ordinary Drink',\n            glass: 'cocktail glass',\n            alcohol: 17,\n            instructions:\n                'Rub rim of cocktail glass with lemon juice and dip rim in salt. Shake schnapps, tequila, triple sec, lemon juice, and strawberries with ice, strain into the salt-rimmed glass, and serve.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/tqyrpw1439905311.jpg',\n            isUnique: false,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Strawberry schnapps',\n                    measure: '1/2 oz '\n                },\n                {\n                    ingredient: 'Tequila',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Triple sec',\n                    measure: '1/2 oz '\n                },\n                {\n                    ingredient: 'Lemon juice',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Strawberries',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Salt',\n                    measure: 'pinch'\n                }\n            ]\n        },\n        {\n            drink: 'Smashed Watermelon Margarita',\n            tags: ['Unique'],\n            category: 'Cocktail',\n            glass: 'collins glass',\n            alcohol: 11,\n            instructions:\n                'In a mason jar muddle the watermelon and 5 mint leaves together into a puree and strain. Next add the grapefruit juice, juice of half a lime and the tequila as well as some ice. Put a lid on the jar and shake. Pour into a glass and add more ice. Garnish with fresh mint and a small slice of watermelon.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/dztcv51598717861.jpg',\n            isUnique: true,\n            base: 'Tequila',\n            ingredients: [\n                {\n                    ingredient: 'Watermelon',\n                    measure: '1/2 cup'\n                },\n                {\n                    ingredient: 'Mint',\n                    measure: '5'\n                },\n                {\n                    ingredient: 'Grapefruit Juice',\n                    measure: '1/3 Cup'\n                },\n                {\n                    ingredient: 'Lime',\n                    measure: 'Juice of 1/2'\n                },\n                {\n                    ingredient: 'Tequila',\n                    measure: '1 shot'\n                },\n                {\n                    ingredient: 'Watermelon',\n                    measure: 'Garnish with'\n                },\n                {\n                    ingredient: 'Mint',\n                    measure: 'Garnish with'\n                }\n            ]\n        },\n        {\n            drink: 'Long vodka',\n            tags: ['ContemporaryClassic'],\n            category: 'Ordinary Drink',\n            glass: 'highball glass',\n            alcohol: 28,\n            instructions:\n                'Shake a tall glass with ice cubes and Angostura, coating the inside of the glass. Por the vodka onto this, add 1 slice of lime and squeeze juice out of remainder, mix with tonic, stir and voila you have a Long Vodka',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/9179i01503565212.jpg',\n            isUnique: false,\n            base: 'Vodka',\n            ingredients: [\n                {\n                    ingredient: 'Vodka',\n                    measure: '5 cl '\n                },\n                {\n                    ingredient: 'Lime',\n                    measure: '1/2 '\n                },\n                {\n                    ingredient: 'Angostura bitters',\n                    measure: '4 dashes '\n                },\n                {\n                    ingredient: 'Tonic water',\n                    measure: '1 dl Schweppes '\n                },\n                {\n                    ingredient: 'Ice',\n                    measure: '4 '\n                }\n            ]\n        },\n        {\n            drink: 'Vodka Fizz',\n            tags: [],\n            category: 'Other/Unknown',\n            glass: 'white wine glass',\n            alcohol: 24,\n            instructions:\n                'Blend all ingredients, save nutmeg. Pour into large white wine glass and sprinkle nutmeg on top.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/xwxyux1441254243.jpg',\n            isUnique: false,\n            base: 'Vodka',\n            ingredients: [\n                {\n                    ingredient: 'Vodka',\n                    measure: '2 oz '\n                },\n                {\n                    ingredient: 'Half-and-half',\n                    measure: '2 oz '\n                },\n                {\n                    ingredient: 'Limeade',\n                    measure: '2 oz '\n                },\n                {\n                    ingredient: 'Ice',\n                    measure: '2 cubes'\n                },\n                {\n                    ingredient: 'Nutmeg',\n                    measure: '1 oz'\n                }\n            ]\n        },\n        {\n            drink: 'Vodka Slime',\n            tags: ['DinnerParty'],\n            category: 'Cocktail',\n            glass: 'highball glass',\n            alcohol: 14,\n            instructions:\n                'Fill glass with ice. Add vodka, 7-up then finish with the lime juice.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/apex461643588115.jpg',\n            isUnique: true,\n            base: 'Vodka',\n            ingredients: [\n                {\n                    ingredient: 'Sprite',\n                    measure: '1 cup'\n                },\n                {\n                    ingredient: 'Lime Juice',\n                    measure: '1/2 shot'\n                },\n                {\n                    ingredient: 'Vodka',\n                    measure: '1 1/2 shot'\n                }\n            ]\n        },\n        {\n            drink: 'Rum Sour',\n            tags: ['ContemporaryClassic'],\n            category: 'Ordinary Drink',\n            glass: 'whiskey sour glass',\n            alcohol: 20,\n            instructions:\n                'In a shaker half-filled with ice cubes, combine the rum, lemon juice, and sugar. Shake well. Strain into a sour glass and garnish with the orange slice and the cherry.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/bylfi21504886323.jpg',\n            isUnique: false,\n            base: 'rum',\n            ingredients: [\n                {\n                    ingredient: 'Light rum',\n                    measure: '2 oz '\n                },\n                {\n                    ingredient: 'Lemon juice',\n                    measure: '1 oz '\n                },\n                {\n                    ingredient: 'Sugar',\n                    measure: '1/2 tsp superfine '\n                },\n                {\n                    ingredient: 'Orange',\n                    measure: '1 '\n                },\n                {\n                    ingredient: 'Maraschino cherry',\n                    measure: '1 '\n                }\n            ]\n        },\n        {\n            drink: 'Espresso Rumtini',\n            tags: ['DinnerParty', 'StrongFlavor'],\n            category: 'Cocktail',\n            glass: 'cocktail glass',\n            alcohol: 15,\n            instructions:\n                'Mix together in a cocktail glass. Garnish with some choclate powder and coffee beans',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/acvf171561574403.jpg',\n            isUnique: true,\n            base: 'rum',\n            ingredients: [\n                {\n                    ingredient: 'Rum',\n                    measure: '1 shot'\n                },\n                {\n                    ingredient: 'Vanilla syrup',\n                    measure: '1/2 shot'\n                },\n                {\n                    ingredient: 'Espresso',\n                    measure: '1 shot'\n                },\n                {\n                    ingredient: 'Coffee',\n                    measure: '1 shot'\n                }\n            ]\n        },\n        {\n            drink: 'Rum Old-fashioned',\n            tags: [],\n            category: 'Ordinary Drink',\n            glass: 'old-fashioned glass',\n            alcohol: 38,\n            instructions:\n                'Stir powdered sugar, water, and bitters in an old-fashioned glass. When sugar has dissolved add ice cubes and light rum. Add the twist of lime peel, float 151 proof rum on top, and serve.',\n            drinkThumb:\n                'https://www.thecocktaildb.com/images/media/drink/otn2011504820649.jpg',\n            isUnique: true,\n            base: 'rum',\n            ingredients: [\n                {\n                    ingredient: 'Light rum',\n                    measure: '1 1/2 oz '\n                },\n                {\n                    ingredient: '151 proof rum',\n                    measure: '1 tsp '\n                },\n                {\n                    ingredient: 'Powdered sugar',\n                    measure: '1/2 tsp '\n                },\n                {\n                    ingredient: 'Bitters',\n                    measure: '1 dash '\n                },\n                {\n                    ingredient: 'Water',\n                    measure: '1 tsp '\n                },\n                {\n                    ingredient: 'Lime peel',\n                    measure: 'Twist of '\n                }\n            ]\n        }\n    ],\n    car: []\n};\n","/MUIForm.tsx":"import React from 'react';\nimport {\n    Box,\n    Button,\n    FormControlLabel,\n    FormGroup,\n    Slider,\n    Switch,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Chip,\n    Checkbox,\n    ListItemText,\n    Typography\n} from '@mui/material';\nimport {\n    AutoFields,\n    AutoViewProps,\n    changeEventHandler,\n    clickEventHandler,\n    CoreSchemaMetaSchema,\n    createUISchema,\n    extractItemUISchema\n} from '@autoviews/core';\n\nexport const MUIForm = (props: AutoViewProps) => {\n    return (\n        <>\n            <FormGroup>\n                <AutoFields\n                    {...props}\n                    uiSchema={extractItemUISchema(\n                        props.uiSchema ?? createUISchema()\n                    )}\n                />\n            </FormGroup>\n            <Box sx={{marginTop: '20px'}}>\n                <Button\n                    variant=\"contained\"\n                    onClick={clickEventHandler<any>({\n                        ...props,\n                        data: {action: 'SAVE'}\n                    })}\n                >\n                    Add\n                </Button>\n            </Box>\n        </>\n    );\n};\n\nexport enum MUITextVariant {\n    regular,\n    multiline\n}\n\nexport const MUIText =\n    (variant: MUITextVariant = MUITextVariant.regular) =>\n    (props: AutoViewProps) => {\n        return (\n            <TextField\n                required={props.metadata?.isRequired}\n                label={props.schema.title || props.field}\n                value={props.data || ''}\n                onChange={changeEventHandler(props, e => e.target.value)}\n                fullWidth\n                multiline={\n                    variant === MUITextVariant.multiline ? true : undefined\n                }\n                rows={variant === MUITextVariant.multiline ? 4 : undefined}\n            />\n        );\n    };\n\nexport const MUINumber = (props: AutoViewProps) => {\n    return (\n        <TextField\n            required={props.metadata?.isRequired}\n            type=\"number\"\n            label={props.schema.title || props.field}\n            value={props.data || ''}\n            onChange={changeEventHandler(props, e => e.target.value)}\n        />\n    );\n};\n\nexport const MUISwitch = (props: AutoViewProps) => {\n    return (\n        <FormControlLabel\n            control={\n                <Switch\n                    required={props.metadata?.isRequired}\n                    checked={props.data ?? false}\n                    onChange={changeEventHandler(props, e => e.target.checked)}\n                />\n            }\n            label={props.schema.title}\n        />\n    );\n};\n\nexport const MUISlider = (props: AutoViewProps) => {\n    return (\n        <formControl>\n            <Typography gutterBottom>\n                {props.schema.title || props.field}\n            </Typography>\n            <Slider\n                sx={{maxWidth: '250px'}}\n                value={props.data ?? props.schema.minimum}\n                valueLabelDisplay=\"on\"\n                min={props.schema.minimum}\n                max={props.schema.maximum}\n                onChange={changeEventHandler(\n                    props,\n                    e => (e?.target as any).value\n                )}\n                marks={[\n                    {\n                        value: props.schema.minimum,\n                        label: `${props.schema.minimum}`\n                    },\n                    {\n                        value: props.schema.maximum,\n                        label: `${props.schema.maximum}`\n                    }\n                ]}\n            />\n        </formControl>\n    );\n};\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250\n        }\n    }\n};\nexport const MUILabelsInput = (props: AutoViewProps) => {\n    const data: Array<string> = props.data || [];\n    const labels: Array<string> = (\n        props.schema.items as CoreSchemaMetaSchema\n    ).oneOf.map(oneOfOption => oneOfOption.const);\n    return (\n        <FormControl>\n            <InputLabel id={`${props.field}-labels-label`}>\n                {props.schema.title || props.field}\n            </InputLabel>\n            <Select\n                labelId={`${props.field}-labels-label`}\n                label={props.schema.title || props.field}\n                id={`${props.field}-labels`}\n                multiple\n                value={data}\n                onChange={changeEventHandler(\n                    props,\n                    e => (e?.target as any).value\n                )}\n                // input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n                renderValue={selected => (\n                    <Box sx={{display: 'flex', flexWrap: 'wrap', gap: 0.5}}>\n                        {selected.map(value => (\n                            <Chip\n                                key={value}\n                                label={value}\n                            />\n                        ))}\n                    </Box>\n                )}\n                MenuProps={MenuProps}\n            >\n                {labels.map(label => (\n                    <MenuItem\n                        key={label}\n                        value={label}\n                    >\n                        <Checkbox checked={data.indexOf(label) > -1} />\n                        <ListItemText primary={label} />\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\n","/MUIRepos.tsx":"import React from 'react';\nimport {ComponentsRepo, isRequired, RootSchemaConsumer} from '@autoviews/core';\nimport {Avatar, Box, TableCell} from '@mui/material';\n\nimport {MUITable, MUITableRow} from './MUITable';\nimport {IMAGE_SUBTYPE, LONG_TEXT_SUBTYPE} from './schemas';\nimport {basicRepo, detectEnums} from './basicRepo';\nimport {\n    MUIForm,\n    MUILabelsInput,\n    MUINumber,\n    MUISlider,\n    MUISwitch,\n    MUIText,\n    MUITextVariant\n} from './MUIForm';\n\ninterface LabelProps {\n    text: string;\n    colorIndex?: number;\n}\nconst colors = [\n    '#32B777',\n    '#170093',\n    '#D0427D',\n    '#6C48EF',\n    '#0097a7',\n    '#2B81CB'\n];\n\nconst textToColor = {};\nlet nextColorIndex = 0;\nfunction resloveColor(text: string) {\n    if (!textToColor[text]) {\n        textToColor[text] = colors[nextColorIndex++ % colors.length];\n    }\n    return textToColor[text];\n}\n\nconst Label = (props: LabelProps) => {\n    const color = props.colorIndex\n        ? colors[props.colorIndex % colors.length]\n        : resloveColor(props.text);\n    return (\n        <span\n            style={{\n                borderRadius: '16px',\n                backgroundColor: color,\n                padding: '0 5px',\n                color: 'white',\n                margin: '0 3px 0 0'\n            }}\n        >\n            {props.text}\n        </span>\n    );\n};\n\nexport const MUITableRepo = basicRepo\n    .clone('MUITableRepo')\n    .register('array', {\n        name: 'tableComponent',\n        component: MUITable,\n        predicate: node => node.items.type === 'object'\n    })\n    .register('object', {\n        name: 'tableRowComponent',\n        component: MUITableRow\n    })\n    .register('array', {\n        name: 'labelsComponent',\n        component: props =>\n            props.data.map(label => (\n                <Label\n                    key={label}\n                    text={label}\n                />\n            )),\n        predicate: node => node.items.type === 'string'\n    })\n    .register('string', {\n        name: 'avatarComponent',\n        component: props => <Avatar src={props.data} />,\n        predicate: node => node.format === IMAGE_SUBTYPE\n    })\n    .addWrapper(item => <TableCell>{item}</TableCell>, {\n        exclude: ['tableComponent', 'tableRowComponent']\n    });\n\nexport const MUIFormRepo = new ComponentsRepo('MUIFormRepo', detectEnums)\n    .register('object', {\n        name: 'formComponent',\n        component: MUIForm\n    })\n    .register('string', {\n        name: 'textComponent',\n        component: MUIText()\n    })\n    .register('string', {\n        name: 'longTextComponent',\n        component: MUIText(MUITextVariant.multiline),\n        predicate: node => node.format === LONG_TEXT_SUBTYPE\n    })\n    .register('number', {\n        name: 'numberComponent',\n        component: MUINumber\n    })\n    .register('number', {\n        name: 'sliderComponent',\n        component: MUISlider,\n        predicate: schema => 'minimum' in schema && 'maximum' in schema\n    })\n    .register('array', {\n        name: 'arrayComponent',\n        component: () => <span>array</span>\n    })\n    .register('array', {\n        name: 'labelsArrayComponent',\n        component: MUILabelsInput,\n        predicate: node => node.items.type === 'string' && !!node.items.oneOf\n    })\n    .register('oneOfEnumLike', {\n        name: 'enumComponent',\n        component: props => <span>{props.data}</span>\n    })\n    .register('boolean', {\n        name: 'switchComponent',\n        component: MUISwitch\n    })\n    .addWrapper(\n        (item, props) => (\n            <RootSchemaConsumer>\n                {({schema}) => {\n                    return (\n                        <Box sx={{margin: '5px 0'}}>\n                            {React.cloneElement(item, {\n                                metadata: {\n                                    isRequired: isRequired(\n                                        schema!,\n                                        props.schemaPointer\n                                    )\n                                }\n                            })}\n                        </Box>\n                    );\n                }}\n            </RootSchemaConsumer>\n        ),\n        {\n            include: [\n                'textComponent',\n                'numberComponent',\n                'switchComponent',\n                'sliderComponent'\n            ]\n        }\n    );\n","/MUITable.tsx":"import React from 'react';\nimport {\n    AutoViewProps,\n    AutoItems,\n    AutoFields,\n    orderFields,\n    getHints,\n    filter,\n    extractItemUISchema,\n    createUISchema\n} from '@autoviews/core';\nimport {\n    TableContainer,\n    Paper,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody\n} from '@mui/material';\n\nexport const MUITable = (props: AutoViewProps) => {\n    const uiHints = getHints(\n        extractItemUISchema(props.uiSchema ?? createUISchema()),\n        ''\n    );\n    const headers = filter(\n        orderFields(\n            Object.keys((props.schema.items as any).properties),\n            uiHints.order\n        ),\n        undefined,\n        undefined,\n        uiHints.hidden\n    ).map(\n        field => (props.schema?.items as any).properties[field].title\n    ) as string[];\n\n    return (\n        <TableContainer component={Paper}>\n            <Table\n                sx={{\n                    minWidth: 650\n                }}\n            >\n                <TableHead>\n                    <TableRow>\n                        {headers.map((header, i) => (\n                            <TableCell key={i}>{header}</TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <AutoItems {...props} />\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const MUITableRow = (props: AutoViewProps) => {\n    return (\n        <TableRow>\n            <AutoFields {...props} />\n        </TableRow>\n    );\n};\n","/schemas.ts":"import {CoreSchemaMetaSchema} from '@autoviews/core';\n\nexport const IMAGE_SUBTYPE = 'image';\nexport const LINK_SUBTYPE = 'link';\nexport const EMAIL_SUBTYPE = 'email';\nexport const LONG_TEXT_SUBTYPE = 'long text';\nconst userSchema: CoreSchemaMetaSchema = {\n    $id: 'userSchema',\n    type: 'object',\n    properties: {\n        firstName: {\n            type: 'string',\n            title: 'First Name'\n        },\n        lastName: {\n            type: 'string',\n            title: 'Last Name'\n        },\n        companyName: {\n            type: 'string',\n            title: 'Company'\n        },\n        address: {\n            type: 'string',\n            title: 'Address'\n        },\n        city: {\n            type: 'string',\n            title: 'City'\n        },\n        county: {\n            type: 'string',\n            title: 'County'\n        },\n        state: {\n            type: 'string',\n            title: 'State'\n        },\n        zip: {\n            type: 'number',\n            title: 'Zip'\n        },\n        phone1: {\n            type: 'string',\n            title: 'Phone 1'\n        },\n        phone2: {\n            type: 'string',\n            title: 'Phone 2'\n        },\n        email: {\n            type: 'string',\n            title: 'Email',\n            format: EMAIL_SUBTYPE\n        },\n        web: {\n            type: 'string',\n            title: 'Web Page',\n            format: LINK_SUBTYPE\n        },\n        avatar: {\n            type: 'string',\n            title: 'Avatar',\n            format: IMAGE_SUBTYPE\n        }\n    },\n    required: ['firstName', 'lastName', 'email']\n};\n\nconst carSchema: CoreSchemaMetaSchema = {\n    type: 'object',\n    properties: {\n        make: {\n            type: 'string',\n            title: 'Manufacturer'\n        },\n        model: {\n            type: 'string',\n            title: 'Model name'\n        },\n        subModel: {\n            type: 'string',\n            title: 'Model options'\n        },\n        licensePlate: {\n            type: 'string',\n            title: 'License Plate'\n        },\n        year: {\n            type: 'number',\n            title: 'Year'\n        },\n        color: {\n            type: 'string',\n            title: 'Car color'\n        }\n    }\n};\n\nconst cocktailSchema: CoreSchemaMetaSchema = {\n    type: 'object',\n    properties: {\n        drink: {\n            type: 'string',\n            title: 'Drink'\n        },\n        tags: {\n            type: 'array',\n            title: 'tags',\n            items: {\n                type: 'string',\n                oneOf: [\n                    {const: 'IBA'},\n                    {const: 'ContemporaryClassic'},\n                    {const: 'Classic'},\n                    {const: 'NewEra'},\n                    {const: 'Original'},\n                    {const: 'DinnerParty'},\n                    {const: 'Unique'},\n                    {const: 'ContemporaryClassic'},\n                    {const: 'StrongFlavor'}\n                ]\n            }\n        },\n        category: {\n            type: 'string',\n            title: 'Category'\n        },\n        iba: {\n            type: 'string',\n            title: 'IBA'\n        },\n        glass: {\n            title: 'Glass',\n            oneOf: [\n                {\n                    const: 'cocktail_glass',\n                    title: 'Cocktail glass'\n                },\n                {\n                    const: 'old_fashioned_glass',\n                    title: 'Old-Fashioned glass'\n                },\n                {\n                    const: 'coupette_glass',\n                    title: 'Margarita/Coupette glass'\n                },\n                {\n                    const: 'colling_glass',\n                    title: 'Collins glass'\n                },\n                {\n                    const: 'brandy',\n                    title: 'Brandy'\n                }\n            ]\n        },\n        alcohol: {\n            type: 'number',\n            maximum: 55,\n            minimum: 10,\n            title: 'Level of alcohol'\n        },\n        instructions: {\n            type: 'string',\n            title: 'Preparation Instructions',\n            format: LONG_TEXT_SUBTYPE\n        },\n        drinkThumb: {\n            type: 'string',\n            title: 'Thumbnail',\n            format: IMAGE_SUBTYPE\n        },\n        ingredients: {\n            type: 'array',\n            title: 'Ingredients',\n            items: {\n                type: 'object',\n                properties: {\n                    ingredient: {\n                        type: 'string',\n                        title: 'Ingredient'\n                    },\n                    measure: {\n                        type: 'string',\n                        title: 'Measure'\n                    }\n                }\n            }\n        },\n        isUnique: {\n            type: 'boolean',\n            title: 'A Unique cocktail'\n        },\n        base: {\n            title: 'Based on',\n            description: 'Spirit the Cocktail is based on',\n            oneOf: [\n                {\n                    const: 'jin',\n                    title: 'Jin'\n                },\n                {\n                    const: 'tequila',\n                    title: 'Tequila'\n                },\n                {\n                    const: 'vodka',\n                    title: 'Vodka'\n                },\n                {\n                    const: 'whiskey',\n                    title: 'Whiskey'\n                },\n                {\n                    const: 'rum',\n                    title: 'Rum'\n                },\n                {\n                    const: 'brandy',\n                    title: 'Brandy'\n                }\n            ]\n        }\n    }\n};\n\nexport const usersSchema: CoreSchemaMetaSchema = {\n    type: 'array',\n    title: 'Users',\n    items: userSchema\n};\n\nexport const carsSchema: CoreSchemaMetaSchema = {\n    type: 'array',\n    title: 'Cars',\n    items: carSchema\n};\n\nexport const cocktailsSchema: CoreSchemaMetaSchema = {\n    type: 'array',\n    title: 'Cocktails',\n    items: cocktailSchema\n};\n","/uiSchemas.ts":"import {OTHER_PROPERTIES, UISchema} from '@autoviews/core';\n\nexport const userFullTableUISchema: UISchema = {\n    hints: {\n        '/items': {\n            order: [\n                'avatar',\n                'firstName',\n                'lastName',\n                'companyName',\n                'address',\n                'city',\n                'county',\n                'state',\n                'zip',\n                'phone1',\n                'phone2',\n                'email',\n                'web'\n            ]\n        }\n    },\n    components: {}\n};\n\nexport const userDefaultTableUISchema: UISchema = {\n    hints: {\n        '/items': {\n            order: [\n                'avatar',\n                'firstName',\n                'lastName',\n                'companyName',\n                'email',\n                'web'\n            ],\n            hidden: [\n                'address',\n                'city',\n                'county',\n                'state',\n                'zip',\n                'phone1',\n                'phone2'\n            ]\n        }\n    },\n    components: {}\n};\n\nconst cocktailDefaultTableUISchema: UISchema = {\n    hints: {\n        '/items': {\n            order: [\n                'drinkThumb',\n                'drink',\n                'tags',\n                'ingredients',\n                'instructions',\n                'category',\n                'iba',\n                'glass',\n                'base'\n            ],\n            hidden: ['isUnique', 'alcohol', 'glass']\n        }\n    },\n    components: {}\n};\n\nconst cocktailBriefTableUISchema: UISchema = {\n    hints: {\n        '/items': {\n            order: ['drinkThumb', 'drink', 'tags', 'category', 'base'],\n            hidden: [\n                'isUnique',\n                'alcohol',\n                'glass',\n                'ingredients',\n                'instructions',\n                'iba',\n                'glass'\n            ]\n        }\n    },\n    components: {}\n};\n\nconst carsTableUISchema: UISchema = {\n    hints: {},\n    components: {}\n};\n\nexport const userFormUISchema: UISchema = {\n    hints: {\n        '/items': {\n            uiGroups: [\n                {\n                    name: 'personalData',\n                    title: 'Personal Data',\n                    fields: ['firstName', 'lastName']\n                },\n                {\n                    name: 'address',\n                    title: 'Address',\n                    fields: ['address', 'city', 'county', 'state', 'zip']\n                },\n                {\n                    name: 'contacts',\n                    title: 'Contact Information',\n                    fields: ['phone1', 'phone2', 'email', 'web']\n                },\n                {\n                    name: 'other',\n                    title: 'Other Fields',\n                    fields: [OTHER_PROPERTIES]\n                }\n            ]\n        }\n    },\n    components: {}\n};\n\nconst cocktailFormUISchema: UISchema = {\n    hints: {},\n    components: {}\n};\n\nconst carsFormUISchema: UISchema = {\n    hints: {},\n    components: {}\n};\n\nexport interface AvailableUISchemasForJSONSchema {\n    table: Record<string, UISchema>;\n    form: Record<string, UISchema>;\n}\nexport interface AvailableUISchemas {\n    user: AvailableUISchemasForJSONSchema;\n    cocktail: AvailableUISchemasForJSONSchema;\n    car: AvailableUISchemasForJSONSchema;\n}\n\nconst userAvailableUISchemas: AvailableUISchemasForJSONSchema = {\n    form: {Default: userFormUISchema},\n    table: {\n        Default: userDefaultTableUISchema,\n        Full: userFullTableUISchema\n    }\n};\nconst cocktailAvailableUISchemas = {\n    form: {Default: cocktailFormUISchema},\n    table: {\n        Default: cocktailDefaultTableUISchema,\n        Brief: cocktailBriefTableUISchema\n    }\n};\nconst carsAvailableUISchemas = {\n    form: {Default: carsFormUISchema},\n    table: {Default: carsTableUISchema}\n};\nexport const availableUISchemas: AvailableUISchemas = {\n    user: userAvailableUISchemas,\n    cocktail: cocktailAvailableUISchemas,\n    car: carsAvailableUISchemas\n};\n"},o={"@mui/material":"^5.3.1","@emotion/react":"^11.7.1","@emotion/styled":"^11.6.0","react-bootstrap":"^2.2.2",bootstrap:"^5.1.3",lodash:"^4.17.21"},r={activePath:"/App.tsx",editorWidthPercentage:50},s={activePath:"/App.tsx",editorWidthPercentage:30};function i(){return{files:a,dependencies:o,options:r}}function m(){return{files:a,dependencies:o,options:s}}},1835:function(n,e,t){t.r(e),t.d(e,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var a=t(7896),o=t(1461),r=(t(2784),t(876)),s=t(7356),i=t(5413),m=["components"],c={},l="Showcase",p={unversionedId:"examples/showcase",id:"examples/showcase",title:"Showcase",description:"",source:"@site/docs/examples/showcase.md",sourceDirName:"examples",slug:"/examples/showcase",permalink:"/autoviews/docs/examples/showcase",editUrl:"https://github.com/wix-incubator/autoviews/tree/master/packages/website/docs/examples/showcase.md",tags:[],version:"current",frontMatter:{},sidebar:"examples",previous:{title:"Basic usage",permalink:"/autoviews/docs/examples/basic"},next:{title:"onClick usage",permalink:"/autoviews/docs/examples/onclick"}},d={},u=[],h={toc:u};function g(n){var e=n.components,t=(0,o.Z)(n,m);return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"showcase"},"Showcase"),(0,r.kt)(s.B,(0,a.Z)({},(0,i.ps)(),{mdxType:"Demo"})))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=d9189380.5451f85c.js.map