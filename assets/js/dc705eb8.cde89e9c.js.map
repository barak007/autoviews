{"version":3,"file":"assets/js/dc705eb8.cde89e9c.js","mappings":"kVAAA,MCQaA,EAAmB,CAC5B,WCTJ,uyDDUI,eEVJ,6NFWI,YGXJ,moBHYI,eDZJ,qMCaI,WIbJ,uFJgBaC,EAAiC,CAC1C,gBAAiB,SACjB,iBAAkB,UAClB,kBAAmB,UACnB,OAAU,YAGDC,EAAuB,CAChCC,WAAY,YKdHC,EAAc,CAAC,EACfC,EAAe,SACfC,EAAW,CACtB,cAAiB,kBACjB,GAAM,kBACN,MAAS,SACT,YAAe,qFACf,OAAU,gCACV,cAAiB,WACjB,KAAQ,mBACR,UAAa,kCACb,OAAS,EACT,QAAW,yFACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,WACX,SAAY,CACV,MAAS,oBACT,UAAa,+CAGJC,EAAS,CAEtB,EAIaC,EAAM,CAAC,CAClBC,MAAO,WACPC,GAAI,WACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAW,GAG/B,IAH+B,WACjCC,KACGC,GACJ,EACC,OAAO,QALS,WAKC,UAAKH,EAAiBG,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAC5E,cACE,GAAM,UACH,WAGL,iBAAK,+DAA6D,sBAAYC,WAAW,KAAM,SAAsB,cAAY,aAAGA,WAAW,IAC3I,KAAQ,8CACL,WAAe,MACtB,iBAAK,eAAa,aAAGA,WAAW,IAC5B,KAAQ,iEACL,SAAa,iFACpB,iBAAK,0EAAwE,sBAAYA,WAAW,KAAM,kDAA+D,2DAAyD,sBAAYA,WAAW,KAAM,SAAsB,6CAA2C,sBAAYA,WAAW,KAAM,uBAAoC,8DAA4D,sBAAYA,WAAW,KAAM,aAA0B,wCACpf,cACE,GAAM,YACH,aACL,QAAC,KAAI,UAAKC,EAAI,CAAEF,QAAQ,WACxB,oBACA,kBAAG,sBAAYC,WAAW,KAAM,mBAAgC,cAAY,sBAAYA,WAAW,KAAM,wBAAqC,cAC9I,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,2MAaP,iBAAK,gCACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,uMAUP,iBAAK,8BAA4B,sBAAYA,WAAW,KAAM,OAAoB,MAClF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,wLAYX,CAEAJ,EAAWM,gBAAiB,C","sources":["webpack://@autoviews/website/./src/examples/layout/schema.json","webpack://@autoviews/website/./src/examples/layout/index.ts","webpack://@autoviews/website/./src/examples/layout/app.tsx","webpack://@autoviews/website/./src/examples/layout/UISchema.ts","webpack://@autoviews/website/./src/examples/layout/repo.tsx","webpack://@autoviews/website/./src/examples/layout/data.ts","webpack://@autoviews/website/./docs/examples/layout.md"],"sourcesContent":["export default \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"login\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"age\\\": {\\n      \\\"type\\\": \\\"number\\\"\\n    },\\n    \\\"active\\\": {\\n      \\\"type\\\": \\\"boolean\\\"\\n    }\\n  }\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\nimport data from './data.ts?raw-loader';\nimport UISchema from './UISchema.ts?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/UISchema.js': UISchema,\n    '/repo.tsx': repo,\n    '/schema.json': schema,\n    '/data.js': data\n};\n\nexport const dependencies: DemoDependencies = {\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0',\n    'lodash': '^4.17.21'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    RepositoryProvider,\\n    AutoView,\\n    CoreSchemaMetaSchema,\\n    getHints,\\n    orderToTemplateAreas\\n} from '@autoviews/core';\\n\\nimport {data} from './data';\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\nimport {userUISchema} from './UISchema';\\n\\nconst layoutStyles = `\\n.root {\\n    display: grid;\\n    grid-template-columns: auto;\\n    grid-template-rows: 1fr;\\n    gap: 1rem;\\n    align-items: stretch;\\n}\\n\\n.child {\\n    padding: 5px;\\n    border: 1px solid gray;\\n}\\n`;\\nconst layoutedRepo = repo\\n    .clone('LayoutRepo')\\n    .addWrapper(\\n        (item, props) => {\\n            const {order} = getHints(props.uiSchema, props.pointer);\\n            return (\\n                <>\\n                    <style>{layoutStyles}</style>\\n                    <div\\n                        className=\\\"root\\\"\\n                        style={{gridTemplateAreas: orderToTemplateAreas(order)}}\\n                    >\\n                        {item}\\n                    </div>\\n                </>\\n            );\\n        },\\n        {include: ['MyObject']}\\n    )\\n    .addWrapper(\\n        (item, props) => {\\n            return (\\n                <div\\n                    style={{gridArea: props.field}}\\n                    className=\\\"child\\\"\\n                >\\n                    {props.field + ': '}\\n                    <strong>{item}</strong>\\n                </div>\\n            );\\n        },\\n        {exclude: ['MyObject']}\\n    );\\n\\nexport default function App() {\\n    return (\\n        <RepositoryProvider components={layoutedRepo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={data}\\n                uiSchema={userUISchema}\\n            />\\n        </RepositoryProvider>\\n    );\\n}\\n\";","export default \"import {createUISchema, UISchema} from '@autoviews/core';\\n\\nexport const userUISchema: UISchema = createUISchema(\\n    {},\\n    {\\n        '': {\\n            order: ['login', ['active', 'age']]\\n        }\\n    }\\n);\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, AutoFields} from '@autoviews/core';\\n\\nexport const repo = new ComponentsRepo('BaseRepo')\\n    .register('object', {\\n        name: 'MyObject',\\n        component: AutoFields\\n    })\\n    .register('string', {\\n        name: 'MyStringComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('number', {\\n        name: 'MyNumberComponent',\\n        component: props => <span>{props.data}</span>\\n    })\\n    .register('boolean', {\\n        name: 'MyBooleanComponent',\\n        component: props => <span>{props.data ? 'online' : 'offline'}</span>\\n    });\\n\";","export default \"export const data = {\\n    login: 'johondoe',\\n    age: 21,\\n    active: true\\n};\\n\";","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Layout';\nexport const metadata = {\n  \"unversionedId\": \"examples/layout\",\n  \"id\": \"examples/layout\",\n  \"title\": \"Layout\",\n  \"description\": \"It is possible to define and persist layout settings using order field in UIHints.\",\n  \"source\": \"@site/docs/examples/layout.md\",\n  \"sourceDirName\": \"examples\",\n  \"slug\": \"/examples/layout\",\n  \"permalink\": \"/autoviews/docs/examples/layout\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/examples/layout.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"examples\",\n  \"previous\": {\n    \"title\": \"AutoHeaders usage\",\n    \"permalink\": \"/autoviews/docs/examples/table-with-header\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Demo} from '@site/src/components';\nimport * as demo from '@site/src/examples/layout';\nexport const toc = [{\n  value: 'Examples',\n  id: 'examples',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h1>\n\n\n    <p>{`It is possible to define and persist layout settings using `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` field in `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/ui-schema#the-hints-ui-hint\"\n      }}>{`UIHints`}</a>{`.`}</p>\n    <p>{`By default `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/entities/ui-schema#example---the-order-and-hidden-hints\"\n      }}>{`order`}</a>{` is an array of strings, simply defining order of fields in the object type.`}</p>\n    <p>{`However order could be also a mix of strings and strings arrays. Like `}<inlineCode parentName=\"p\">{`['field-1', ['field-2', 'field-4'], 'field-3']`}</inlineCode>{`. It is very neat to convert that type of defining the `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` into CSS Grid definitions, specifically `}<inlineCode parentName=\"p\">{`grid-template-areas`}</inlineCode>{` and then, when rendering children it becomes easy to set `}<inlineCode parentName=\"p\">{`grid-area`}</inlineCode>{` style with the current field name.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Demo {...demo} mdxType=\"Demo\" />\n    <hr></hr>\n    <p><inlineCode parentName=\"p\">{`@autoviews/core`}</inlineCode>{` provides `}<inlineCode parentName=\"p\">{`orderToTemplateAreas`}</inlineCode>{` utility:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const gridTemplateAreas = orderToTemplateAreas([\n  'field-1',\n  ['field-2', 'field-4'],\n  'field-3'\n]);\n\n/**\n Result\n '\"field-1 field-1\"\n \"field-2 field-4\"\n \"field-3 field-3\"'\n*/\n`}</code></pre>\n    <p>{`It consider some edge cases`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const gridTemplateAreas = orderToTemplateAreas([\n  ['field-1', 'field-3'][('field-1', 'field-2', 'field-4')]\n]);\n\n/**\n Result\n '\"field-1 field-3 .\"\n \"field-1 field-2, field-4\"'\n*/\n`}</code></pre>\n    <p>{`And of course you can use `}<inlineCode parentName=\"p\">{`'.'`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const gridTemplateAreas = orderToTemplateAreas([\n    ['field-1', '.', 'field-2']\n    'field-3'\n])\n\n/**\n Result\n '\"field-1 . field-2\"\n \"field-3 field-3, field-3\"'\n*/\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["files","dependencies","options","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","demo","isMDXComponent"],"sourceRoot":""}