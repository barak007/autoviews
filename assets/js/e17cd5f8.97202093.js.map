{"version":3,"file":"assets/js/e17cd5f8.97202093.js","mappings":"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","sources":["webpack://@autoviews/website/./docs/entities/object-components.md"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Creating Object components';\nexport const metadata = {\n  \"unversionedId\": \"entities/object-components\",\n  \"id\": \"entities/object-components\",\n  \"title\": \"Creating Object components\",\n  \"description\": \"AutoViews does not come with pre-made components to render objects (doing so will defeat the idea of\",\n  \"source\": \"@site/docs/entities/object-components.md\",\n  \"sourceDirName\": \"entities\",\n  \"slug\": \"/entities/object-components\",\n  \"permalink\": \"/autoviews/docs/entities/object-components\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/website/docs/entities/object-components.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"Creating Array components\",\n    \"permalink\": \"/autoviews/docs/entities/array-components\"\n  },\n  \"next\": {\n    \"title\": \"The Repository Provider\",\n    \"permalink\": \"/autoviews/docs/entities/repository-provider\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'AutoFields',\n  id: 'autofields',\n  level: 2\n}, {\n  value: '<code>AutoFields</code> props',\n  id: 'autofields-props',\n  level: 3\n}, {\n  value: 'the render function',\n  id: 'the-render-function',\n  level: 3\n}, {\n  value: 'Example - simple form rendering',\n  id: 'example---simple-form-rendering',\n  level: 3\n}, {\n  value: 'Example - rendering form for array objects',\n  id: 'example---rendering-form-for-array-objects',\n  level: 3\n}, {\n  value: 'Example - using the render function to add field titles',\n  id: 'example---using-the-render-function-to-add-field-titles',\n  level: 3\n}, {\n  value: 'Example - grouping different input fields using &#39;UISchema&#39;',\n  id: 'example---grouping-different-input-fields-using-uischema',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"creating-object-components\"\n    }}>{`Creating Object components`}</h1>\n    <p>{`AutoViews does not come with pre-made components to render objects (doing so will defeat the idea of\nusing your own components). However, AutoViews provides utilities and APIs to create your own components\nto render objects.`}</p>\n    <p>{`The simplest object component will be`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ObjectRepo').register('object', {\n  name: 'obj',\n  component: props => <AutoFields {...props} />\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"autofields\"\n    }}>{`AutoFields`}</h2>\n    <p><inlineCode parentName=\"p\">{`AutoFields`}</inlineCode>{` is a utility element used to render the fields of an object.\nEach object field is matched with the `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode>{` fields by field names.\nInternally it apply `}<inlineCode parentName=\"p\">{`AutoViews`}</inlineCode>{` for each of the fields of the object.`}</p>\n    <h3 {...{\n      \"id\": \"autofields-props\"\n    }}><inlineCode parentName=\"h3\">{`AutoFields`}</inlineCode>{` props`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`extending `}<inlineCode parentName=\"li\">{`AutoViewProps`}</inlineCode>{` - getting the same properties as `}<inlineCode parentName=\"li\">{`AutoViews`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode>{` - optional callback to apply to each of the rendered object fields`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"the-render-function\"\n    }}>{`the render function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`declare function render(\n  item: React.ReactNode,\n  props: AutoViewProps,\n  key: string\n): React.ReactNode;\n`}</code></pre>\n    <p>{`The render callback parameters`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`item`}</inlineCode>{` - the rendered item, rendered using `}<inlineCode parentName=\"li\">{`AutoViews`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`props`}</inlineCode>{` - the `}<inlineCode parentName=\"li\">{`AutoViewProps`}</inlineCode>{` used to render the object field.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{` - the field name in the object`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example---simple-form-rendering\"\n    }}>{`Example - simple form rendering`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`new ComponentsRepo('ObjectRepo')\n  .register('string', {\n    name: 'StringComponent',\n    component: props => <input value={props.value} />\n  })\n  .register('number', {\n    name: 'NumberComponent',\n    component: props => (\n      <input\n        value={props.value}\n        type=\"number\"\n      />\n    )\n  })\n  .register('object', {\n    name: 'FormComponent',\n    component: props => (\n      <form>\n        <AutoFields {...props} />\n      </form>\n    )\n  });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---rendering-form-for-array-objects\"\n    }}>{`Example - rendering form for array objects`}</h3>\n    <p>{`This example shows how to render a form for an object which is a member of an array.\nTo do so, we need to specify to `}<inlineCode parentName=\"p\">{`AutoFields`}</inlineCode>{` which part of the schema to use\nto render the form, for instance for a new item form (new item to be added to the array).`}</p>\n    <p>{`The example is using the `}<inlineCode parentName=\"p\">{`extractItemUISchema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`createUISchema`}</inlineCode>{` utility functions\nimported from `}<inlineCode parentName=\"p\">{`AutoViews`}</inlineCode>{` to extract the array items schema from the root schema\n(extract `}<inlineCode parentName=\"p\">{`userSchema`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`usersSchema`}</inlineCode>{`)`}</p>\n    <p>{`Such a form will be using such a component`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`new ComponentsRepo('ObjectRepo')\n  .register('string', {\n    name: 'StringComponent',\n    component: props => <input value={props.value} />\n  })\n  .register('number', {\n    name: 'NumberComponent',\n    component: props => (\n      <input\n        value={props.value}\n        type=\"number\"\n      />\n    )\n  })\n  .register('object', {\n    name: 'FormComponent',\n    component: props => (\n      <form>\n        <AutoFields\n          {...props}\n          uiSchema={extractItemUISchema(props.uiSchema ?? createUISchema())}\n        />\n      </form>\n    )\n  });\n`}</code></pre>\n    <p>{`For reference, the schema used is something like the below schema`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const userSchema: CoreSchemaMetaSchema = {\n  $id: 'userSchema',\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First Name'\n    },\n    lastName: {\n      type: 'string',\n      title: 'Last Name'\n    },\n    age: {\n      type: 'number',\n      title: 'Age'\n    },\n    active: {\n      type: 'boolean',\n      title: 'Is User Active'\n    }\n  },\n  required: ['firstName', 'lastName', 'age']\n};\n\nexport const usersSchema: CoreSchemaMetaSchema = {\n  type: 'array',\n  title: 'Users',\n  items: userSchema\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---using-the-render-function-to-add-field-titles\"\n    }}>{`Example - using the render function to add field titles`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`new ComponentsRepo('ObjectRepo')\n  .register('string', {\n    name: 'StringComponent',\n    component: props => <input value={props.value} />\n  })\n  .register('number', {\n    name: 'NumberComponent',\n    component: props => (\n      <input\n        value={props.value}\n        type=\"number\"\n      />\n    )\n  })\n  .register('object', {\n    name: 'FormComponent',\n    component: props => (\n      <form>\n        <AutoFields\n          {...props}\n          render={node => (\n            <>\n              <span>{props.schema.title}</span>\n              node\n            </>\n          )}\n        />\n      </form>\n    )\n  });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example---grouping-different-input-fields-using-uischema\"\n    }}>{`Example - grouping different input fields using 'UISchema'`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const FormComponent = (props: AutoViewProps) => {\n  const itemUISchema = extractItemUISchema(props.uiSchema ?? createUISchema());\n  const UISchemaAcessor = createUISchemaAccessor(\n    itemUISchema,\n    '',\n    ACCESSOR_TYPES.object\n  );\n\n  const allProperties = Object.keys(props.schema.properties!);\n  const groups = UISchemaAcessor.getGroups() ?? [];\n  const groupNames = groups.map(({name}) => name).concat([UNGROUPED]);\n  return (\n    <form>\n      {groupNames.map(name => {\n        const fields = getPropertiesByGroupName(\n          groups,\n          name,\n          allProperties\n        ).filter(field => allProperties.includes(field));\n\n        if (!fields.length) return null;\n\n        return (\n          <div\n            className=\"group\"\n            key={name}\n          >\n            <AutoFields\n              {...props}\n              uiSchema={itemUISchema}\n              pick={fields}\n            />\n          </div>\n        );\n      })}\n    </form>\n  );\n};\n\nnew ComponentsRepo('ObjectRepo')\n  .register('string', {\n    name: 'StringComponent',\n    component: props => <input value={props.value} />\n  })\n  .register('number', {\n    name: 'NumberComponent',\n    component: props => (\n      <input\n        value={props.value}\n        type=\"number\"\n      />\n    )\n  })\n  .register('object', {\n    name: 'FormComponent',\n    component: FormComponent\n  });\n`}</code></pre>\n    <p>{`For reference, the above form can use the `}<inlineCode parentName=\"p\">{`JSONSchema`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const userSchema: CoreSchemaMetaSchema = {\n  $id: 'userSchema',\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First Name'\n    },\n    lastName: {\n      type: 'string',\n      title: 'Last Name'\n    },\n    age: {\n      type: 'number',\n      title: 'Age'\n    },\n    active: {\n      type: 'boolean',\n      title: 'Is User Active'\n    }\n  },\n  required: ['firstName', 'lastName', 'age']\n};\n`}</code></pre>\n    <p>{`and the `}<inlineCode parentName=\"p\">{`UISchema`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const hintsSchema: UISchema = {\n  hints: {\n    '/': {\n      order: ['age'],\n      uiGroups: [\n        {\n          name: 'personalData',\n          title: 'Personal Data',\n          fields: ['firstName', 'lastName']\n        },\n        {\n          name: 'other',\n          title: 'Other Fields',\n          fields: [OTHER_PROPERTIES]\n        }\n      ]\n    }\n  },\n  components: {}\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}