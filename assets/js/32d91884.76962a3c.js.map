{"version":3,"file":"assets/js/32d91884.76962a3c.js","mappings":"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","sources":["webpack://@autoviews/docs/./src/components/Demo/Demo.tsx","webpack://@autoviews/docs/./docs/subschemas/combiners-oneof.md","webpack://@autoviews/docs/./src/examples/subschemas/oneof/inside-object/index.ts","webpack://@autoviews/docs/./src/examples/subschemas/oneof/inside-object/app.tsx","webpack://@autoviews/docs/./src/examples/subschemas/oneof/inside-object/repo.tsx","webpack://@autoviews/docs/./src/examples/subschemas/oneof/inside-object/schema.json","webpack://@autoviews/docs/./src/examples/subschemas/oneof/enum/index.ts","webpack://@autoviews/docs/./src/examples/subschemas/oneof/enum/app.tsx","webpack://@autoviews/docs/./src/examples/subschemas/oneof/enum/repo.tsx","webpack://@autoviews/docs/./src/examples/subschemas/oneof/enum/schema.json"],"sourcesContent":["import React from 'react';\nimport {\n    Sandpack,\n    SandpackFiles,\n    SandpackProps\n} from '@codesandbox/sandpack-react';\nimport {useColorMode} from '@docusaurus/theme-common';\n\nexport type DemoFiles = SandpackFiles;\nexport type DemoDependencies = Record<string, string>;\nexport type DemoOptions = SandpackProps['options'];\n\nexport interface DemoProps {\n    files: DemoFiles;\n    dependencies?: DemoDependencies;\n    options?: DemoOptions;\n}\n\nconst initialDeps = {\n    '@autoviews/core': '^1.0.0'\n};\n\nexport function Demo(props: DemoProps) {\n    const {isDarkTheme} = useColorMode();\n    return (\n        <Sandpack\n            theme={isDarkTheme ? 'dark' : 'light'}\n            template=\"react-ts\"\n            customSetup={{\n                files: props.files,\n                dependencies: {\n                    ...initialDeps,\n                    ...props.dependencies\n                }\n            }}\n            options={{\n                showNavigator: true,\n                editorHeight: 500,\n                externalResources: [\n                    'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap',\n                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                ],\n                ...props.options\n            }}\n        />\n    );\n}\n","\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'oneOf';\nexport const metadata = {\n  \"unversionedId\": \"subschemas/combiners-oneof\",\n  \"id\": \"subschemas/combiners-oneof\",\n  \"title\": \"oneOf\",\n  \"description\": \"Enum with titles\",\n  \"source\": \"@site/docs/subschemas/combiners-oneof.md\",\n  \"sourceDirName\": \"subschemas\",\n  \"slug\": \"/subschemas/combiners-oneof\",\n  \"permalink\": \"/autoviews/docs/subschemas/combiners-oneof\",\n  \"editUrl\": \"https://github.com/wix-incubator/autoviews/tree/master/packages/website/docs/subschemas/combiners-oneof.md\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"mySidebar\",\n  \"previous\": {\n    \"title\": \"if/then/else\",\n    \"permalink\": \"/autoviews/docs/subschemas/conditions\"\n  },\n  \"next\": {\n    \"title\": \"$ref\",\n    \"permalink\": \"/autoviews/docs/subschemas/combiners-ref\"\n  }\n};\nexport const assets = {\n\n};\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport {Demo} from '@site/src/components';\nimport * as insideObjectFiles from '../../src/examples/subschemas/oneof/inside-object';\nimport * as enumDemo from '@site/src/examples/subschemas/oneof/enum';\nexport const toc = [{\n  value: 'Enum with titles',\n  id: 'enum-with-titles',\n  level: 2\n}, {\n  value: 'OneOf inside object',\n  id: 'oneof-inside-object',\n  level: 2\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst CustomOneOfComponent = makeShortcode(\"CustomOneOfComponent\");\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"oneof\"\n    }}>{`oneOf`}</h1>\n\n\n    <h2 {...{\n      \"id\": \"enum-with-titles\"\n    }}>{`Enum with titles`}</h2>\n    <p>{`Where dropdown render is needed, `}<inlineCode parentName=\"p\">{`enum`}</inlineCode>{` is the first thing that come to mind. Unfortunately, it's lack of titles functionality (enumNames `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rjsf-team/react-jsonschema-form/issues/532\"\n      }}>{`proposal`}</a>{` wasn't accepted).\nIn this case, `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`const`}</inlineCode>{` is here to the rescue.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-note alert alert--secondary\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"\n              }}></path></svg></span>{`note`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`In this example, schema's node with `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` doesn't contain `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` keyword, so repo's `}<inlineCode parentName=\"p\">{`getNodeType`}</inlineCode>{` must return `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` type in order to render registered component automatically.\nAlternatively, `}<inlineCode parentName=\"p\">{`<RepositoryComponentByType />`}</inlineCode>{` could be used to render `}<inlineCode parentName=\"p\">{`oneOf`}</inlineCode>{` component manually inside object component.`}</p></div></div>\n    <Demo {...enumDemo} mdxType=\"Demo\" />\n    <h2 {...{\n      \"id\": \"oneof-inside-object\"\n    }}>{`OneOf inside object`}</h2>\n    <p>{`Common example with form, where only one field is required (`}<inlineCode parentName=\"p\">{`homePhone`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`mobilePhone`}</inlineCode>{`).`}</p>\n    <p>{`This examples have two different oneOf components, one the same as in previous example, and second one, which is rendered manually as part of object type.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-note alert alert--secondary\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"\n              }}></path></svg></span>{`note`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Note, here `}<CustomOneOfComponent mdxType=\"CustomOneOfComponent\" />{` contains some JSON Schema generation, which could passed to AutoView to automatically render dropdown with registered in repo component.`}</p></div></div>\n    <Demo {...insideObjectFiles} mdxType=\"Demo\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\n\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\nexport const App = () => {\\n    const [value, setValue] = React.useState({});\\n    const onChange = React.useCallback(e => setValue(e.target.value), []);\\n\\n    return (\\n        <RepositoryProvider components={repo}>\\n            <AutoView\\n                schema={schema as CoreSchemaMetaSchema}\\n                data={value}\\n                onChange={onChange}\\n            />\\n        </RepositoryProvider>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    AutoViewProps,\\n    ComponentsRepo,\\n    AutoFields,\\n    RepositoryComponentByType,\\n    changeEventHandler\\n} from '@autoviews/core';\\nimport {\\n    TextField,\\n    FormControl,\\n    FormLabel,\\n    RadioGroup,\\n    FormControlLabel,\\n    Radio\\n} from '@mui/material';\\n\\nconst StringComponent: React.FC<AutoViewProps> = props => (\\n    <FormControl\\n        fullWidth\\n        margin=\\\"normal\\\"\\n    >\\n        <TextField\\n            variant=\\\"outlined\\\"\\n            label={props.schema.title}\\n            value={props.data}\\n            onChange={changeEventHandler(props, e => e.target.value)}\\n        />\\n    </FormControl>\\n);\\n\\nconst ObjectComponent: React.FC<AutoViewProps> = props => (\\n    <>\\n        {props.schema.oneOf && (\\n            <RepositoryComponentByType\\n                type={customOneOfType}\\n                {...props}\\n            />\\n        )}\\n        <AutoFields {...props} />\\n    </>\\n);\\n\\nconst OneOfAsEnumComponent: React.FC<AutoViewProps> = props => (\\n    <FormControl\\n        fullWidth\\n        margin=\\\"normal\\\"\\n    >\\n        <FormLabel id={props.schema.title}>{props.schema.title}</FormLabel>\\n        <RadioGroup\\n            row\\n            name={props.schema.title}\\n            onChange={changeEventHandler(props, e => e.target.value)}\\n            defaultValue={props.schema.oneOf[0].const}\\n        >\\n            {props.schema.oneOf!.map(item => (\\n                <FormControlLabel\\n                    key={item.const}\\n                    value={item.const}\\n                    control={<Radio />}\\n                    label={item.title}\\n                />\\n            ))}\\n        </RadioGroup>\\n    </FormControl>\\n);\\n\\nconst customOneOfType = Symbol('customOneOf');\\nconst CustomOneOfComponent: React.FC<AutoViewProps> = props => {\\n    const [option, setOption] = React.useState(0);\\n\\n    const onChange = React.useCallback<\\n        React.ChangeEventHandler<HTMLSelectElement>\\n    >(\\n        e => {\\n            setOption(parseInt(e.target.value, 10));\\n        },\\n        [setOption]\\n    );\\n\\n    const optionSchema = {\\n        title: 'Select contact',\\n        oneOf: props.schema.oneOf?.map((_, index) => ({\\n            const: index,\\n            title: `Option #${index + 1}`\\n        }))\\n    };\\n\\n    return (\\n        <>\\n            <AutoView\\n                {...props}\\n                schema={optionSchema}\\n                onChange={onChange}\\n                data={option}\\n            />\\n            <AutoFields\\n                {...props}\\n                schema={{...props.schema, ...props.schema.oneOf![option]}}\\n            />\\n        </>\\n    );\\n};\\n\\nexport const repo = new ComponentsRepo('oneof-inside-object-repo', node => {\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    if ('oneOf' in node) {\\n        return 'oneOf';\\n    }\\n})\\n    .register('string', {\\n        name: 'string',\\n        component: StringComponent\\n    })\\n    .register('number', {\\n        name: 'number',\\n        component: StringComponent\\n    })\\n    .register('object', {\\n        name: 'object',\\n        component: ObjectComponent\\n    })\\n    .register('oneOf', {\\n        name: 'oneOfAsEnum',\\n        component: OneOfAsEnumComponent\\n    })\\n    .register(customOneOfType, {\\n        name: 'oneOf',\\n        component: CustomOneOfComponent\\n    });\\n\";","export default \"{\\n  \\\"title\\\": \\\"Some form\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"firstName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"title\\\": \\\"First name\\\"\\n    },\\n    \\\"lastName\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"title\\\": \\\"Last name\\\"\\n    }\\n  },\\n  \\\"oneOf\\\": [\\n    {\\n      \\\"properties\\\": {\\n        \\\"homePhone\\\": {\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"title\\\": \\\"Home phone\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\\"homePhone\\\"]\\n    },\\n    {\\n      \\\"properties\\\": {\\n        \\\"mobilePhone\\\": {\\n          \\\"type\\\": \\\"number\\\",\\n          \\\"title\\\": \\\"Mobile phone\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\\"mobilePhone\\\"]\\n    }\\n  ]\\n}\\n\";","import {DemoDependencies, DemoFiles, DemoOptions} from '@site/src/components';\n\nimport schema from './schema.json?raw-loader';\nimport repo from './repo.tsx?raw-loader';\nimport app from './app.tsx?raw-loader';\n\nexport const files: DemoFiles = {\n    '/App.tsx': app,\n    '/repo.tsx': repo,\n    '/schema.json': schema\n};\n\nexport const dependencies: DemoDependencies = {\n    'fast-json-patch': '^3.1.0',\n    '@mui/material': '^5.3.1',\n    '@emotion/react': '^11.7.1',\n    '@emotion/styled': '^11.6.0'\n};\n\nexport const options: DemoOptions = {\n    activePath: '/App.tsx'\n};\n","export default \"import React from 'react';\\nimport {\\n    AutoView,\\n    RepositoryProvider,\\n    CoreSchemaMetaSchema\\n} from '@autoviews/core';\\nimport {Box, Typography} from '@mui/material';\\n\\nimport schema from './schema.json';\\nimport {repo} from './repo';\\n\\nconst App = () => {\\n    const [value, setValue] = React.useState<string>('');\\n    const onChange = React.useCallback(e => setValue(e.target.value), []);\\n\\n    return (\\n        <>\\n            <RepositoryProvider components={repo}>\\n                <AutoView\\n                    schema={schema as CoreSchemaMetaSchema}\\n                    data={value}\\n                    onChange={onChange}\\n                />\\n            </RepositoryProvider>\\n            {value && (\\n                <>\\n                    <Typography>\\n                        <Box\\n                            sx={{marginTop: '20px'}}\\n                            style={{display: 'flex', alignItems: 'center'}}\\n                        >\\n                            <span>You just selected</span>\\n                            <span\\n                                style={{\\n                                    background: value,\\n                                    display: 'block',\\n                                    width: '16px',\\n                                    height: '16px',\\n                                    margin: '0 10px',\\n                                    borderRadius: '4px'\\n                                }}\\n                            />\\n                        </Box>\\n                    </Typography>\\n                </>\\n            )}\\n        </>\\n    );\\n};\\n\\nexport default App;\\n\";","export default \"import React from 'react';\\nimport {ComponentsRepo, changeEventHandler, AutoFields} from '@autoviews/core';\\nimport {FormControl, InputLabel, Select, MenuItem} from '@mui/material';\\n\\nexport const repo = new ComponentsRepo('enum-repo', node => {\\n    if ('type' in node) {\\n        return node.type;\\n    }\\n\\n    if ('oneOf' in node) {\\n        return 'oneOf';\\n    }\\n\\n    throw new Error('cannot resolve type');\\n});\\n\\nrepo.register('object', {\\n    name: 'object',\\n    component: AutoFields\\n});\\n\\nrepo.register('oneOf', {\\n    name: 'oneOfAsEnum',\\n    component: props => (\\n        <FormControl fullWidth>\\n            <InputLabel id={props.schema.title}>\\n                {props.schema.title}\\n            </InputLabel>\\n            <Select\\n                labelId={props.schema.title}\\n                id=\\\"select\\\"\\n                value={props.data}\\n                label={props.schema.title}\\n                onChange={changeEventHandler(props, e => e.target.value)}\\n            >\\n                {props.schema.oneOf!.map(item => (\\n                    <MenuItem\\n                        key={item.const}\\n                        value={item.const}\\n                    >\\n                        {item.title}\\n                    </MenuItem>\\n                ))}\\n            </Select>\\n        </FormControl>\\n    )\\n});\\n\";","export default \"{\\n  \\\"title\\\": \\\"Form\\\",\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"properties\\\": {\\n    \\\"color\\\": {\\n      \\\"title\\\": \\\"Favorite color\\\",\\n      \\\"oneOf\\\": [\\n        {\\n          \\\"const\\\": \\\"#c0c0c0\\\",\\n          \\\"title\\\": \\\"Silver\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#ff00ff\\\",\\n          \\\"title\\\": \\\"Fuchsia\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#00ff00\\\",\\n          \\\"title\\\": \\\"Lime\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#800000\\\",\\n          \\\"title\\\": \\\"Maroon\\\"\\n        },\\n        {\\n          \\\"const\\\": \\\"#008080\\\",\\n          \\\"title\\\": \\\"Teal\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\";"],"names":["initialDeps","Demo","props","isDarkTheme","useColorMode","theme","template","customSetup","files","dependencies","options","showNavigator","editorHeight","externalResources","name","activePath","frontMatter","contentTitle","metadata","assets","toc","value","id","level","CustomOneOfComponent","console","warn","layoutProps","MDXContent","components","mdxType","parentName","enumDemo","insideObjectFiles","isMDXComponent"],"sourceRoot":""}